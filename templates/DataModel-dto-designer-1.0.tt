// <auto-generated>
//   This code was generated by a tool.
//   Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated.
// </auto-generated>
// Tpl: <#= System.IO.Path.GetFileName(TemplateFileName) #>
// Src: <#= System.IO.Path.GetFileName(SourceFileName) #>
<#@ template language="C#" #>
<#@ output extension=".Designer.cs" encoding="utf-8" #>
<#@ assembly name="netstandard.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="KpokEntityTool.Models" #>
<#@ parameter type="KpokEntityTool.Models.Entity" name="Source" #>
<#@ parameter type="System.String" name="TemplateFileName" #>
<#@ parameter type="System.String" name="SourceFileName" #>
<#
    string summary;
    string className;
    string returnType;
    string propertyName;
    EntityProperty property;
    NavigationalProperty navigationalProperty;

    var namespaceSuffix = GetExtPropValue(Source.ExtendedProperties, "NamespaceSuffix", ".Dtos");
    var classSuffix = GetExtPropValue(Source.ExtendedProperties, "ClassSuffix", "Dto");

    className = RemoveHintPrefix(Source.Name ?? "") + classSuffix;

    WriteLine("");
    WriteLine("namespace " + (Source.Namespace ?? "") + namespaceSuffix);
    WriteLine("{");

    summary = Source.Summary ?? "";
    summary += "\nRelease: " + (Source.Release ?? "");
    WriteSummary(1, summary);
    WriteRemarks(1, Source.Remarks);

    Write(BuildModifier(Source.Access) + " partial class " + className);
    WriteLine("");
    WriteLine("{");

    // properties
    ClearIndent();
    PushIndent(T(2));
    for (int i = 0; i < Source.Properties.Count; i++) {
        property = Source.Properties[i];
        propertyName = RemoveHintPrefix(property.Name ?? "");

        if (property.IsPartitionKey ||
            property.Protection != ProtectionType.None)
        { 
            continue;
        }

        if (i > 0) {
            WriteLine("");
        }

        returnType = string.IsNullOrWhiteSpace(property.CastDataType)
            ? ToCSharpType(property.DataType, property.Mandatory)
            : property.CastDataType;

        WriteSummary(2, property.Summary);
        Write(BuildModifier(property.Access) + " " + returnType + " " + propertyName);
        WriteLine(" { get; set; }");
    }

    // constructors
    ClearIndent();
    PushIndent(T(2));
    WriteLine("");
    WriteLine("/// <summary>");
    WriteLine("/// Creates a new instance of <see cref=\"" + className + "\"/>.");
    WriteLine("/// </summary>");
    WriteLine("public " + className + "()");
    WriteLine("{");
    WriteLine("}");

    WriteLine("");
    WriteLine("/// <summary>");
    WriteLine("/// Initializes a new instance of <see cref=\"" + className + "\"/>.");
    WriteLine("/// </summary>");
    WriteLine("/// <param name=\"source\">Source object to initialize this DTO.</param>");
    WriteLine("public " + className + "(" + RemoveHintPrefix(Source.Name ?? "") + " source)");
    WriteLine("{");
    WriteLine("    if (source == null)");
    WriteLine("    {");
    WriteLine("        throw new ArgumentNullException(nameof(source));");
    WriteLine("    }");

    WriteLine("");
    PushIndent(T(1));
    
    // properties
    for (int i = 0; i < Source.Properties.Count; i++) {
        property = Source.Properties[i];
        propertyName = RemoveHintPrefix(property.Name ?? "");

        if (property.IsPartitionKey ||
            property.Protection != ProtectionType.None)
        { 
            continue;
        }

        WriteLine(propertyName + " = source." + propertyName + ";");
    }

    // navigational properties
    for (int i = 0; i < Source.NavigationalProperties.Count; i++) {
        navigationalProperty = Source.NavigationalProperties[i];
        WriteLine(navigationalProperty.Name + " = source." + navigationalProperty.Name + ";");
    }

    PopIndent();
    WriteLine("}");

    // navigational properties
    ClearIndent();
    PushIndent(T(2));
    for (int i = 0; i < Source.NavigationalProperties.Count; i++) {
        navigationalProperty = Source.NavigationalProperties[i];

        returnType = navigationalProperty.IsSingle 
            ? navigationalProperty.DataModelType ?? ""
            : "ICollection<" + (navigationalProperty.DataModelType ?? "") + ">";

        WriteLine("");
        WriteSummary(2, navigationalProperty.Summary);
        WriteLine(BuildModifier(navigationalProperty.Access) + " " + returnType + " " + navigationalProperty.Name + " { get; set; }");
    }

    // class.
    ClearIndent();
    PushIndent(T(1));
    WriteLine("}");

    // namespace.
    ClearIndent();
    WriteLine("}");
#><#@ include file=".\Lib\Commons.tt" #>