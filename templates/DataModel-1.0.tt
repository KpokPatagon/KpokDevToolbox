// <auto-generated>
//   This code was generated by a tool.
//   Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated.
// </auto-generated>
// Tpl: <#= System.IO.Path.GetFileName(TemplateFileName) #>
// Src: <#= System.IO.Path.GetFileName(SourceFileName) #>
<#@ template language="C#" #>
<#@ output extension=".Designer.cs" encoding="utf-8" #>
<#@ assembly name="netstandard.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="KpokEntityTool.Models" #>
<#@ include file=".\Lib\Commons.tt" #>
<#@ parameter type="KpokEntityTool.Models.Entity" name="Source" #>
<#@ parameter type="System.String" name="TemplateFileName" #>
<#@ parameter type="System.String" name="SourceFileName" #>
<#
    int cnt;
    string sep;
    string tmp;
    string summary;
    string returnType;
    EntityProperty property;

    var primaryKeys = GetPrimaryKeyProperties(Source);
    var hasPK = primaryKeys.Any();

    var modelLabelsType = GetExtPropValue(Source.ExtendedProperties, "ModelLabelsType", "");
    var modelLabelsNamespace = GetExtPropValue(Source.ExtendedProperties, "ModelLabelsNamespace", "");

    WriteLine("Inetdev.Data");
    WriteLine("using System;");
    WriteLine("using System.Linq");
    WriteLine("using System.Threading.Tasks");
    WriteLine("using System.Collections.Generic");
    WriteLine("using System.ComponentModel.DataAnnotations");

    if (!string.IsNullOrWhiteSpace(modelLabelsNamespace)) {
        WriteLine("");
        WriteLine("using " + modelLabelsNamespace + ";");
    }

    if (Source.ExtendedProperties.Any(x => x.Key == "using")) {
        WriteLine("");
        foreach (var extp in Source.ExtendedProperties.Where(x => x.Key == "using")) {
            WriteLine("using " + extp.Value + ';');
        }
    }

    WriteLine("");
    WriteLine("namespace " + (Source.Namespance ?? ""));
    WriteLine("{");

    summary = Source.Summary ?? "";
    summary += "\nRelease: " + (Source.Release ?? "");
    WriteSummary(1, summary);
    WriteRemarks(1, Source.Remarks);

    Write(BuildModifier(Source.Access) + " partial class " + (Source.Name ?? "") + " : DataModel");
    if (hasPK) {
        Write(", IEquatable<" + (Source.Name ?? "") + ">");
    }
    WriteLine("{");

    // properties
    ClearIndent();
    PushIndent(Tabs(2));
    for (int i = 0; i < Source.Properties.Count; i++) {
        property = Source.Properties[i];

        if (i > 0) {
            WriteLine("");
        }
        WriteLine(ToCSharpType(property.DataType, property.Mandatory) + " " + (property.FieldName ?? "") + ";");

        WriteSummary(2, property.Summary);

        switch (property.DataType) {
        case DataType.BigInt:
        case DataType.Integer:
        case DataType.SmallInt:
        case DataType.TinyInt:
            Write("[IntegerDataProperty(\"" + property.Name + "\", DbType." + Convert.ToString(property.DataType));
            if (!string.IsNullOrWhiteSpace(property.MinValue)) { Write(", MinValue = " + property.MinValue); }
            if (!string.IsNullOrWhiteSpace(property.MaxValue)) { Write(", MaxValue = " + property.MaxValue); }
            if (property.PositiveOnly) { Write(", PositiveOnly = true"); }
            break;
        case DataType.Clob:
        case DataType.NClob:
        case DataType.NText:
        case DataType.Text:
            if (property.IsPrimaryKeyText) {
                Write("[PrimaryKeyTextDataProperty(\"" + property.Name + "\"");
            }
            else if (property.IsMail) {
                Write("[EmailTextDataProperty(\"" + property.Name + "\"");
            }
            else {
                Write("[TextDataProperty(\"" + property.Name + "\"");
            }
            Write(", DbType." + Convert.ToString(property.DataType));
            if (!string.IsNullOrWhiteSpace(property.MinLength)) { Write(", MinLength = " + property.MinLength); }
            if (!string.IsNullOrWhiteSpace(property.MaxLength)) { Write(", MaxLength = " + property.MaxLength); }
            if (!string.IsNullOrWhiteSpace(property.InvalidChars)) { Write(", InvalidChars = \"" + property.InvalidChars + "\""); }
            break;
        case DataType.Decimal:
            Write("[DecimalDataProperty(\"" + property.Name + "\", DbType." + Convert.ToString(property.DataType));
            if (!string.IsNullOrWhiteSpace(property.MinValue)) { Write(", MinValue = " + property.MinValue); }
            if (!string.IsNullOrWhiteSpace(property.MaxValue)) { Write(", MaxValue = " + property.MaxValue); }
            if (property.PositiveOnly) { Write(", PositiveOnly = true"); }

            if (!string.IsNullOrWhiteSpace(property.Precision))
            {
                int preci = 0;
                int scale = 0;

                Int32.TryParse(property.Precision, out preci);
                if (!string.IsNullOrWhiteSpace(property.Scale)) {
                    Int32.TryParse(property.Scale, out scale);
                }

                if (preci > 0) { Write(", Integers = " + Convert.ToString(preci - scale)); }
                if (scale > 0) { Write(", Decimals = " + Convert.ToString(scale)); }
            }
            break;
        case DataType.Float:
            Write("[FloatDataProperty(\"" + property.Name + "\", DbType." + Convert.ToString(property.DataType));
            if (!string.IsNullOrWhiteSpace(property.MinValue)) { Write(", MinValue = " + property.MinValue); }
            if (!string.IsNullOrWhiteSpace(property.MaxValue)) { Write(", MaxValue = " + property.MaxValue); }
            if (property.PositiveOnly) { Write(", PositiveOnly = true"); }
            break;
        default:
            // default is for Blob, Boolean, DateTime, Guid and TimeSpan.
            Write("[GenericDataProperty(\"" + property.Name + "\", DbType." + Convert.ToString(property.DataType));
            break;
        }

        if (!string.IsNullOrWhiteSpace(property.FieldName)) { Write(", FieldName = \"" + property.FieldName + "\""); }
        if (IsPrimaryKey(property)) { 
            Write(", PrimaryKey = " + property.PrimaryKey); 
        }
        else if (property.Mandatory && property.DataType != DataType.Boolean) {
            Write(", Mandatory = true");
        }
        if (!string.IsNullOrWhiteSpace(property.DefaultValue)) { Write(", DefaultValue = " + property.DefaultValue); }
        if (property.AutomaticType != AutomaticType.None) { Write(", AutomaticType = AutomaticType." + Convert.ToString(property.AutomaticType)); }
        if (property.Protection != ProtectionType.None) { Write(", Protection = ProtectionType." + Convert.ToString(property.Protection)); }

        if (!string.IsNullOrWhiteSpace(modelLabelsType))
        {
            Write(", Caption = \"" + (Source.Name ?? "") + (property.Name ?? "") + "Caption\"");
            if (!string.IsNullOrWhiteSpace(property.Hint)) { Write(", Hint = \"" + (Source.Name ?? "") + (property.Name ?? "") + "Hint\""); }
            if (!string.IsNullOrWhiteSpace(property.MandatoryMessage)) { Write(", RequiredMessage = \"" + (Source.Name ?? "") + (property.Name ?? "") + "RequiredMessage\""); }
            if (!string.IsNullOrWhiteSpace(property.InvalidContentMessage)) { Write(", InvalidContentMessage = \"" + (Source.Name ?? "") + (property.Name ?? "") + "InvalidContentMessage\""); }
            Write(", ResourceType = typeof(" + modelLabelsType + ")");
        }
        else 
        {
            Write(", Caption = \"" + property.Caption + "\"");
            if (!string.IsNullOrWhiteSpace(property.Hint)) { Write(", Hint = \"" + Source.Hint + "\""); }
            if (!string.IsNullOrWhiteSpace(property.MandatoryMessage)) { Write(", RequiredMessage = \"" + Source.MandatoryMessage + "\""); }
            if (!string.IsNullOrWhiteSpace(property.InvalidContentMessage)) { Write(", InvalidContentMessage = \"" + Source.InvalidContentMessage + "\""); }
        }
        WriteLine(")]");

        // continue from here


    }

    // constructors
    if (kasPK)
    {
        ClearIndent();
        PushIndent(Tabs(2));
        WriteLine("");
        WriteLine("/// <summary>");
        WriteLine("/// Creates a new instance of <see cref=\"" + (Source.Name ?? "") + "\"/>.");
        WriteLine("/// </summary>");
        WriteLine("public " + (Source.Name ?? "") + "()");
        WriteLine("{");
        WriteLine("}");

        WriteLine("");
        WriteLine("/// <summary>");
        WriteLine("/// Initializes a new instance of <see cref=\"" + (Source.Name ?? "") + "\"/>.");
        WriteLine("/// </summary>");
        foreach (var pk in primaryKeys) {
            WriteLine("/// <param name=\"" + ToArgumentName(pk.Name) + "\">" + (pk.summary ?? "") + "</param>");
        }
        WriteLine("public " + (Source.Name ?? "") + "(" + BuildArguments(primaryKeys) + ")");
        WriteLine("{");
        PushIndent(Tabs(1));
        foreach (var pk in primaryKeys) {
            WriteLine(RemoveHintPrefix(pk.Name) + " = " + ToArgumentName(pk.Name) + ";");
        }
        PopIndent();
        WriteLine("}");
    }

    // class.
    ClearIndent();
    PushIndent(Tabs(1));
    WriteLine("}");

    // namespace.
    ClearIndent();
    WriteLine("}");
#>

<# 

// entity properties
foreach (var property in Source.Properties) 
{ 


    if (     !string.IsNullOrWhiteSpace(property.MandatoryMessage)
        && ((!string.IsNullOrWhiteSpace(property.PrimaryKey) && property.PrimaryKey != "0") || property.Mandatory)) 
    {
        if (modelLabelsType != null && !string.IsNullOrWhiteSpace(modelLabelsType.Value)) {
            Write("[Required(ErrorMessageResourceName = \"" + Source.Name + property.Name + "MandatoryMessage\"");
            WriteLine(", ErrorMessageResourceType = typeof(" + modelLabelsType.Value + "))]");
        }
        else {
            WriteLine("[Required(ErrorMessage = \"" + property.MandatoryMessage + "\")]");
        }
    }

    if (   property.DataType == DataType.Clob 
        || property.DataType == DataType.NClob 
        || property.DataType == DataType.NText 
        || property.DataType == DataType.Text)
    {
        if (!string.IsNullOrWhiteSpace(property.InvalidContentMessage))
        {
            int minlen = 0;
            int maxlen = 0;
            if (!string.IsNullOrWhiteSpace(property.MinLength)) {
                Int32.TryParse(property.MinLength, out minlen);
            }
            if (!string.IsNullOrWhiteSpace(property.MaxLength)) {
                Int32.TryParse(property.MaxLength, out maxlen);
            }

            if (maxlen > 0)
            {
                Write("[StringLength(" + Convert.ToString(maxlen));
                if (modelLabelsType != null && !string.IsNullOrWhiteSpace(modelLabelsType.Value)) 
                {
                    Write(", ErrorMessageResourceName = \"" + Source.Name + property.Name + "InvalidContentMessage\"");
                    Write(", ErrorMessageResourceType = typeof(" + modelLabelsType.Value + ")");
                }
                else 
                {
                    Write(", ErrorMessage = \"" + property.InvalidContentMessage + "\"");
                }
                if (minlen > 0) {
                    Write(", MinimumLength = " + Convert.ToString(minlen));
                }
                WriteLine(")]");
            }
        }
    }

    if (property.DataType == DataType.Blob && string.Equals("byte[]", property.CastDataType))
    {
        WriteLine(BuildModifier(property.Access) + " byte[] " + property.Name);
        WriteLine("{");
        PushIndent(Tabs(1));

        // get
        WriteLine("get { return " + property.FieldName + "; }");

        // set
        WriteLine("set");
        WriteLine("{");
        PushIndent(Tabs(1));
        WriteLine(property.FieldName + " = value;");
        WriteLine("NotifyPropertyChanged(" + property.FieldName + ");");
        PopIndent();
        WriteLine("}");
        
        PopIndent();
        WriteLine("}");
    }
    else if (property.DataType == DataType.Blob)
    {
        WriteLine(BuildModifier(property.Access) + " BinaryAttachment " + property.Name);
        WriteLine("{");
        PushIndent(Tabs(1));

        // get
        WriteLine("get");
        WriteLine("{");
        PushIndent(Tabs(1));
        WriteLine("if (" + property.FieldName + " == null || " + property.FieldName + ".Length == 0) return null;");
        WriteLine("else return new BinaryAttachment(" + property.FieldName + ");");
        PopIndent();
        WriteLine("}");

        // set
        WriteLine("set");
        WriteLine("{");
        PushIndent(Tabs(1));
        WriteLine("if (value == null) " + property.FieldName + " = null;");
        WriteLine("else " + property.FieldName + " = value.BinaryData;");
        WriteLine("NotifyPropertyChanged(" + property.FieldName + ");");
        PopIndent();
        WriteLine("}");
        
        PopIndent();
        WriteLine("}");
    }
    else
    {
        returnType = string.IsNullOrWhiteSpace(property.CastDataType)
            ? ToCSharpType(property.DataType, property.Mandatory)
            : property.CastDataType;

        WriteLine(BuildModifier(property.Access) + " " + returnType + " " + property.Name);
        WriteLine("{");
        PushIndent(Tabs(1));

        tmp = string.IsNullOrWhiteSpace(property.CastDataType)
            ? property.FieldName
            : "(" + property.CastDataType + ")" + property.FieldName;

        WriteLine("get { return " + tmp + "; }");
        WriteLine("set");
        WriteLine("{");
        PushIndent(Tabs(1));

        tmp = string.IsNullOrWhiteSpace(property.CastDataType)
            ? "value"
            : "(" + ToCSharpType(property.DataType, property.Mandatory) + ")value";

        WriteLine(property.FieldName + " = " + tmp + ";");
        WriteLine("NotifyPropertyChanged(" + property.FieldName + ");");
        PopIndent();
        WriteLine("}");
        PopIndent();
        WriteLine("}");
    }
} 
// end of entity properties

// navigational properties
foreach (var property in Source.NavigationalProperties)
{
    ClearIndent();

    returnType = property.DataModelType;
    if (!property.IsSingle) 
    {
        returnType = "IEnumerable<" + returnType + ">";
    }
    
    WriteLine(string.Empty);
    WriteLine(Tabs(2) + returnType + " " + ToFieldName(property.Name) + ";");

    WriteSummary(2, property.Summary);

    PushIndent(Tabs(2));

    if (property.IsParent) { WriteLine("[ParentNavigationalProperty]"); }

    WriteLine(BuildModifier(property.Access) + " " + returnType + " " + property.Name);
    WriteLine("{");
    PushIndent(Tabs(1));

    // getter
    WriteLine("get");
    WriteLine("{");
    PushIndent(Tabs(1));

    cnt = 0;
    tmp = string.Empty;
    sep = string.Empty;
    
    foreach (var par in property.ParameterMappings)
    {
        var p = Source.Properties.FirstOrDefault(x => x.Name == par.PropertyName);
        if (p != null && !IsBoolean(p))
        {
            cnt++;

            tmp += sep + p.FieldName;

            if (IsNullable(p)) 
            {
                tmp += " == null";
            }
            else if (IsDateTime(p)) 
            {
                tmp += " == DateTime.MinValue";
            }
            else if (IsDecimal(p)) 
            {
                tmp += (p.PositiveOnly ? " <= " : " < ") + "0m";
            }
            else // if (IsInteger(p))
            {
                tmp += (p.PositiveOnly ? " <= " : " < ") + "0";
            }
            
            if (string.IsNullOrWhiteSpace(sep)) { sep = " && "; }
        }
    }

    if (cnt > 0 && cnt == property.ParameterMappings.Count)
    {
        WriteLine("if (" + tmp + ")");
        WriteLine("{");
        PushIndent(Tabs(1));
        if (property.IsSingle) 
        {
            WriteLine("return null;");
        }
        else 
        { 
            WriteLine("return new " + property.DataModelType + "[0];");
        }
        PopIndent();
        WriteLine("}");
        WriteLine(string.Empty);
    }

    WriteLine("if (" + ToFieldName(property.Name) + " == null)");
    WriteLine("{");
    PushIndent(Tabs(1));

    if (   string.IsNullOrWhiteSpace(property.DataServiceType)
        || string.IsNullOrWhiteSpace(property.DataServiceFilter))
    {
        Write(ToFieldName(property.Name) + " = " + property.DataModelType + ".Load(");
        
        sep = string.Empty;
        foreach (var par in property.ParameterMappings) 
        {
            Write(sep + par.ParameterName + ": " + par.PropertyName);
            if (string.IsNullOrWhiteSpace(sep)) { sep = ", "; }
        }
        WriteLine(");");
    }
    else
    {
        WriteLine(property.DataServiceType + " ds = ApplicationContext.Current.GetObject<" + property.DataServiceType + ">();");
        
        if (property.DataServiceFilterIsAsync)
        {
            Write("Task<" + returnType + "> task = ");
        }
        else
        {
            Write(ToFieldName(property.Name) + " = ");
        }
        
        Write("ds." + property.DataServiceFilter + "(");
        
        sep = string.Empty;
        foreach (var par in property.ParameterMappings) 
        {
            Write(sep + par.ParameterName + ": " + par.PropertyName);
            if (string.IsNullOrWhiteSpace(sep)) { sep = ", "; }
        }
        WriteLine(");");

        if (property.DataServiceFilterIsAsync)
        {
            WriteLine("task.Wait();");
            WriteLine(ToFieldName(property.Name) + " = task.Result;");
        }
    }

    PopIndent();
    WriteLine("}");

    WriteLine("return " + ToFieldName(property.Name) + ";");

    PopIndent();
    WriteLine("}");

    // setter
    WriteLine("set { " + ToFieldName(property.Name) + " = value; }");

    PopIndent();
    WriteLine("}");
}
// end of  navigational properties.

ClearIndent();
#>


        /// <summary>
        /// Whether model validation must be enforced.
        /// </summary>
        [Editable(false)]
        public override bool EnforceModelValidation => <#= (Source.EnforceModelValidation ? "true" : "false") #>;

<# if (pks.Any()) { #>
        
        #region Static loaders

        /// <summary>
        /// Initializes a new instance of <see cref="<#= Source.Name #>"/> by loading the data from the underlaying repository.
        /// </summary>
<# foreach (var pk in pks) { #>
        /// <param name="<#= ToArgument(pk.Name) #>"><#= pk.Summary ?? string.Empty #></param>
<# } #>
        public static <#= Source.Name #> Load(<#= BuildArguments(pks) #>)
        {
<#
sep = string.Empty;
tmp = string.Empty; 
foreach (var pk in pks) 
{ 
    tmp += sep + ToArgument(pk.Name);
    if (string.IsNullOrWhiteSpace(sep)) { sep = ", "; }
} #>
            <#= Source.Name #> o;
            o = ApplicationContext.Current.GetObject<<#= Source.Name #>>(<#= tmp #>);
            o = o.DataServices.GetModel(o);
            return o;
        }

        /// <summary>
        /// Initializes a new instance of <see cref="<#= Source.Name #>"/> by loading the data from the underlaying repository.
        /// </summary>
<# foreach (var pk in pks) { #>
        /// <param name="<#= ToArgument(pk.Name) #>"><#= pk.Summary ?? string.Empty #></param>
<# } #>
        public static Task<<#= Source.Name #>> LoadAsync(<#= BuildArguments(pks) #>)
        {
<#
sep = string.Empty;
tmp = string.Empty; 
foreach (var pk in pks) 
{ 
    tmp += sep + ToArgument(pk.Name);
    if (string.IsNullOrWhiteSpace(sep)) { sep = ", "; }
} #>
            <#= Source.Name #> o;
            o = ApplicationContext.Current.GetObject<<#= Source.Name #>>(<#= tmp #>);
            o = o.DataServices.GetModel(o);
            return Task.FromResult(o);
        }

        #endregion

        #region IEquatable<<#= Source.Name#>> implementation.

        /// <summary>
        /// Checks if <paramref name="other"/> is equals to this object.
        /// </summary>
        public bool Equals(<#= Source.Name #> other)
        {
            if (other == null) return false;
            else
            {
<#
ClearIndent();
PushIndent(Tabs(4));

sep = string.Empty;
tmp = string.Empty;
foreach (var pk in pks) 
{
    if (string.IsNullOrWhiteSpace(sep)) 
    {
        Write("return ");
    }
    Write(sep);

    if (pk.DataType == DataType.NText || pk.DataType == DataType.Text)
    {
        Write("string.Equals(" + pk.Name + ", other." + pk.Name + ", StringComparison.OrdinalIgnoreCase)");
    }
    else
    {
        Write("(" + pk.Name + " == other." + pk.Name + ")");
    }

    if (pk.Equals(pks.Last())) 
    {
        WriteLine(";");
    }
    else
    {
        WriteLine(string.Empty);
    }

    if (string.IsNullOrWhiteSpace(sep)) 
    { 
        sep = "&& "; 
        PushIndent(Tabs(1));
    }
}

ClearIndent();
#>
            }
        }

        /// <summary>
        /// Checks if <paramref name="obj"/> is equals to this object.
        /// </summary>
        /// <param name="obj">An object to compare with this object.</param>
        public override bool Equals(object obj) => Equals(obj as <#= Source.Name #>);

        /// <summary>Not required, implemented to avoid warnings, returns base.GetHasCode().</summary>
        public override int GetHashCode() => base.GetHashCode();

        #endregion
<# } #>
