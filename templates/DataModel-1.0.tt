// <auto-generated>
//   This code was generated by a tool.
//   Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated.
// </auto-generated>
// Tpl: <#= System.IO.Path.GetFileName(TemplateFileName) #>
// Src: <#= System.IO.Path.GetFileName(SourceFileName) #>
<#@ template language="C#" #>
<#@ output extension=".Designer.cs" encoding="utf-8" #>
<#@ assembly name="netstandard.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="KpokEntityTool.Models" #>
<#@ parameter type="KpokEntityTool.Models.Entity" name="Source" #>
<#@ parameter type="System.String" name="TemplateFileName" #>
<#@ parameter type="System.String" name="SourceFileName" #>
<#
    int cnt;
    string sep;
    string tmp;
    string summary;
    string returnType;
    string fieldName;
    string entityName;
    string propertyName;
    EntityProperty property;
    NavigationalProperty navigationalProperty;

    entityName = RemoveHintPrefix(Source.Name ?? "");

    var primaryKeys = GetPrimaryKeyProperties(Source);
    var hasPK = primaryKeys.Any();

    var modelLabelsType = GetExtPropValue(Source.ExtendedProperties, "ModelLabelsType", "");
    var modelLabelsNamespace = GetExtPropValue(Source.ExtendedProperties, "ModelLabelsNamespace", "");

    WriteLine("Inetdev.Data");
    WriteLine("using System;");
    WriteLine("using System.Linq");
    WriteLine("using System.Threading.Tasks");
    WriteLine("using System.Collections.Generic");
    WriteLine("using System.ComponentModel.DataAnnotations");

    if (!string.IsNullOrWhiteSpace(modelLabelsNamespace)) {
        WriteLine("");
        WriteLine("using " + modelLabelsNamespace + ";");
    }

    if (Source.ExtendedProperties.Any(x => x.Key == "using")) {
        WriteLine("");
        foreach (var extp in Source.ExtendedProperties.Where(x => x.Key == "using")) {
            WriteLine("using " + extp.Value + ';');
        }
    }

    WriteLine("");
    WriteLine("namespace " + (Source.Namespance ?? ""));
    WriteLine("{");

    summary = Source.Summary ?? "";
    summary += "\nRelease: " + (Source.Release ?? "");
    WriteSummary(1, summary);
    WriteRemarks(1, Source.Remarks);

    Write(BuildModifier(Source.Access) + " partial class " + entityName + " : DataModel");
    if (hasPK) {
        Write(", IEquatable<" + entityName + ">");
    }
    WriteLine("{");

    // properties
    ClearIndent();
    PushIndent(Tabs(2));
    for (int i = 0; i < Source.Properties.Count; i++) {
        property = Source.Properties[i];
        fieldName = RemoveHintPrefix(property.FieldName ?? "");
        propertyName = RemoveHintPrefix(property.Name ?? "");

        if (i > 0) {
            WriteLine("");
        }
        WriteLine(ToCSharpType(property.DataType, property.Mandatory) + " " + fieldName + ";");

        WriteSummary(2, property.Summary);

        // IDataProperty attribute
        switch (property.DataType) {
        case DataType.BigInt:
        case DataType.Integer:
        case DataType.SmallInt:
        case DataType.TinyInt:
            Write("[IntegerDataProperty(\"" + propertyName + "\", DbType." + Convert.ToString(property.DataType));
            if (!string.IsNullOrWhiteSpace(property.MinValue)) { Write(", MinValue = " + property.MinValue); }
            if (!string.IsNullOrWhiteSpace(property.MaxValue)) { Write(", MaxValue = " + property.MaxValue); }
            if (property.PositiveOnly) { Write(", PositiveOnly = true"); }
            break;
        case DataType.Clob:
        case DataType.NClob:
        case DataType.NText:
        case DataType.Text:
            if (property.IsPrimaryKeyText) {
                Write("[PrimaryKeyTextDataProperty(\"" + propertyName + "\"");
            }
            else if (property.IsMail) {
                Write("[EmailTextDataProperty(\"" + propertyName + "\"");
            }
            else {
                Write("[TextDataProperty(\"" + propertyName + "\"");
            }
            Write(", DbType." + Convert.ToString(property.DataType));
            if (!string.IsNullOrWhiteSpace(property.MinLength)) { Write(", MinLength = " + property.MinLength); }
            if (!string.IsNullOrWhiteSpace(property.MaxLength)) { Write(", MaxLength = " + property.MaxLength); }
            if (!string.IsNullOrWhiteSpace(property.InvalidChars)) { Write(", InvalidChars = \"" + property.InvalidChars + "\""); }
            break;
        case DataType.Decimal:
            Write("[DecimalDataProperty(\"" + propertyName + "\", DbType." + Convert.ToString(property.DataType));
            if (!string.IsNullOrWhiteSpace(property.MinValue)) { Write(", MinValue = " + property.MinValue); }
            if (!string.IsNullOrWhiteSpace(property.MaxValue)) { Write(", MaxValue = " + property.MaxValue); }
            if (property.PositiveOnly) { Write(", PositiveOnly = true"); }

            if (!string.IsNullOrWhiteSpace(property.Precision))
            {
                int preci = 0;
                int scale = 0;

                Int32.TryParse(property.Precision, out preci);
                if (!string.IsNullOrWhiteSpace(property.Scale)) {
                    Int32.TryParse(property.Scale, out scale);
                }

                if (preci > 0) { Write(", Integers = " + Convert.ToString(preci - scale)); }
                if (scale > 0) { Write(", Decimals = " + Convert.ToString(scale)); }
            }
            break;
        case DataType.Float:
            Write("[FloatDataProperty(\"" + propertyName + "\", DbType." + Convert.ToString(property.DataType));
            if (!string.IsNullOrWhiteSpace(property.MinValue)) { Write(", MinValue = " + property.MinValue); }
            if (!string.IsNullOrWhiteSpace(property.MaxValue)) { Write(", MaxValue = " + property.MaxValue); }
            if (property.PositiveOnly) { Write(", PositiveOnly = true"); }
            break;
        default:
            // default is for Blob, Boolean, DateTime, Guid and TimeSpan.
            Write("[GenericDataProperty(\"" + propertyName + "\", DbType." + Convert.ToString(property.DataType));
            break;
        }

        if (!string.IsNullOrWhiteSpace(property.FieldName)) { Write(", FieldName = \"" + property.FieldName + "\""); }
        if (IsPrimaryKey(property)) { 
            Write(", PrimaryKey = " + property.PrimaryKey); 
        }
        else if (property.Mandatory && property.DataType != DataType.Boolean) {
            Write(", Mandatory = true");
        }
        if (!string.IsNullOrWhiteSpace(property.DefaultValue)) { Write(", DefaultValue = " + property.DefaultValue); }
        if (property.AutomaticType != AutomaticType.None) { Write(", AutomaticType = AutomaticType." + Convert.ToString(property.AutomaticType)); }
        if (property.Protection != ProtectionType.None) { Write(", Protection = ProtectionType." + Convert.ToString(property.Protection)); }

        if (!string.IsNullOrWhiteSpace(modelLabelsType))
        {
            Write(", Caption = \"" + entityName + propertyName + "Caption\"");
            if (!string.IsNullOrWhiteSpace(property.Hint)) { Write(", Hint = \"" + entityName + propertyName + "Hint\""); }
            if (!string.IsNullOrWhiteSpace(property.MandatoryMessage)) { Write(", RequiredMessage = \"" + entityName + propertyName + "RequiredMessage\""); }
            if (!string.IsNullOrWhiteSpace(property.InvalidContentMessage)) { Write(", InvalidContentMessage = \"" + entityName + propertyName + "InvalidContentMessage\""); }
            Write(", ResourceType = typeof(" + modelLabelsType + ")");
        }
        else 
        {
            Write(", Caption = \"" + property.Caption + "\"");
            if (!string.IsNullOrWhiteSpace(property.Hint)) { Write(", Hint = \"" + Source.Hint + "\""); }
            if (!string.IsNullOrWhiteSpace(property.MandatoryMessage)) { Write(", RequiredMessage = \"" + Source.MandatoryMessage + "\""); }
            if (!string.IsNullOrWhiteSpace(property.InvalidContentMessage)) { Write(", InvalidContentMessage = \"" + Source.InvalidContentMessage + "\""); }
        }
        WriteLine(")]");

        // DataAnnotation attributes
        if (!string.IsNullOrWhiteSpace(property.MandatoryMessage) && (IsPrimaryKey(property) || property.Mandatory))
        {
            if (!string.IsNullOrWhiteSpace(modelLabelsType)) {
                Write("[Required(ErrorMessageResourceName = \"" + entityName + propertyName + "RequiredMessage\"");
                WriteLine(", ErrorMessageResourceType = typeof(" + modelLabelsType + "))]");
            }
            else {
                WriteLine("[Required(ErrorMessage = \"" + property.MandatoryMessage + "\")]");
            }
        }

        if (!string.IsNullOrWhiteSpace(property.InvalidContentMessage) && (
            property.DataType == DataType.Clob || 
            property.DataType == DataType.NClob || 
            property.DataType == DataType.NText || 
            property.DataType == DataType.Text))
        {
            int minlen = 0;
            int maxlen = 0;
            if (!string.IsNullOrWhiteSpace(property.MinLength)) {
                Int32.TryParse(property.MinLength, out minlen);
            }
            if (!string.IsNullOrWhiteSpace(property.MaxLength)) {
                Int32.TryParse(property.MaxLength, out maxlen);
            }

            if (maxlen > 0)
            {
                Write("[StringLength(" + Convert.ToString(maxlen));
                if (!string.IsNullOrWhiteSpace(modelLabelsType)) 
                {
                    Write(", ErrorMessageResourceName = \"" + entityName + propertyName + "InvalidContentMessage\"");
                    Write(", ErrorMessageResourceType = typeof(" + modelLabelsType + ")");
                }
                else 
                {
                    Write(", ErrorMessage = \"" + property.InvalidContentMessage + "\"");
                }
                if (minlen > 0) {
                    Write(", MinimumLength = " + Convert.ToString(minlen));
                }
                WriteLine(")]");
            }
        }

        // The property
        if (property.DataType == DataType.Blob && string.Equals("byte[]", property.CastDataType))
        {
            WriteLine(BuildModifier(property.Access) + " byte[] " + propertyName);
            WriteLine("{");
            PushIndent(Tabs(1));

            WriteLine("get { return " + fieldName + "; }");
            WriteLine("set");
            WriteLine("{");
            PushIndent(Tabs(1));
            WriteLine(fieldName + " = value;");
            WriteLine("NotifyPropertyChanged(" + fieldName + ");");
            PopIndent();
            WriteLine("}");
            
            PopIndent();
            WriteLine("}");
        }
        else if (property.DataType == DataType.Blob)
        {
            WriteLine(BuildModifier(property.Access) + " BinaryAttachment " + propertyName);
            WriteLine("{");
            PushIndent(Tabs(1));

            // get
            WriteLine("get");
            WriteLine("{");
            PushIndent(Tabs(1));
            WriteLine("if (" + fieldName + " != null && " + fieldName + ".Length > 0)");
            WriteLine(Tabs(1) + "return new BinaryAttachment(" + fieldName + ");");
            WriteLine("return null;");
            PopIndent();
            WriteLine("}");

            // set
            WriteLine("set");
            WriteLine("{");
            PushIndent(Tabs(1));
            WriteLine("if (value == null)");
            WriteLine(Tabs(1) + fieldName + " = null;");
            WriteLine("else");
            WriteLine(Tabs(1) + fieldName + " = value.BinaryData;")
            WriteLine("NotifyPropertyChanged(" + fieldName + ");");
            PopIndent();
            WriteLine("}");
            
            PopIndent();
            WriteLine("}");
        }
        else
        {
            returnType = string.IsNullOrWhiteSpace(property.CastDataType)
                ? ToCSharpType(property.DataType, property.Mandatory)
                : property.CastDataType;

            WriteLine(BuildModifier(property.Access) + " " + returnType + " " + propertyName);
            WriteLine("{");
            PushIndent(Tabs(1));

            tmp = string.IsNullOrWhiteSpace(property.CastDataType)
                ? fieldName : "(" + property.CastDataType + ")" + fieldName;

            WriteLine("get { return " + tmp + "; }");
            WriteLine("set");
            WriteLine("{");
            PushIndent(Tabs(1));

            tmp = string.IsNullOrWhiteSpace(property.CastDataType)
                ? "value"
                : "(" + ToCSharpType(property.DataType, property.Mandatory) + ")value";

            WriteLine(fieldName + " = " + tmp + ";");
            WriteLine("NotifyPropertyChanged(" + fieldName + ");");
            PopIndent();
            WriteLine("}");
            PopIndent();
            WriteLine("}");
        }
    }

    WriteLine("");
    WriteLine("/// <summary>");
    WriteLine("/// Whether validation must be enforced.");
    WriteLine("/// </summary>");
    WriteLine("[Editable(false)]");
    WriteLine("public override bool EnforceModelValidation => " + (Source.EnforceModelValidation ? "true;" : "false;"));

    // constructors
    if (kasPK)
    {
        ClearIndent();
        PushIndent(Tabs(2));
        WriteLine("");
        WriteLine("/// <summary>");
        WriteLine("/// Creates a new instance of <see cref=\"" + (Source.Name ?? "") + "\"/>.");
        WriteLine("/// </summary>");
        WriteLine("public " + (Source.Name ?? "") + "()");
        WriteLine("{");
        WriteLine("}");

        WriteLine("");
        WriteLine("/// <summary>");
        WriteLine("/// Initializes a new instance of <see cref=\"" + (Source.Name ?? "") + "\"/>.");
        WriteLine("/// </summary>");
        foreach (var pk in primaryKeys) {
            WriteLine("/// <param name=\"" + ToArgumentName(pk.Name) + "\">" + (pk.summary ?? "") + "</param>");
        }
        WriteLine("public " + (Source.Name ?? "") + "(" + BuildArguments(primaryKeys) + ")");
        WriteLine("{");
        PushIndent(Tabs(1));
        foreach (var pk in primaryKeys) {
            WriteLine(RemoveHintPrefix(pk.Name) + " = " + ToArgumentName(pk.Name) + ";");
        }
        PopIndent();
        WriteLine("}");
    }

    // navigational properties
    ClearIndent();
    PushIndent(Tabs(2));
    for (int i = 0; i < Source.NavigationalProperties.Count; i++) {
        navigationalPropery = Source.NavigationalProperties[i];

        if (i > 0) {
            WriteLine("");
        }

        returnType = navigationalPropery.IsSingle 
            ? navigationalPropery.DataModelType ?? ""
            : "ICollection<" + (navigationalPropery.DataModelType ?? "") + ">";

        WriteSummary(2, navigationalPropery.Summary);
        if (navigationalPropery.IsParent) { 
            WriteLine("[ParentNavigationalProperty]");
        }
        WriteLine(BuildModifier(navigationalPropery.Access) + " " + returnType + " " + navigationalPropery.Name + " get; set; }");
    }

    if (hasPK) 
    {
        ClearIndent();
        PushIndent(Tabs(2));
        WriteLine("");
        WriteLine("#region IEquatable<" + entityName + "> implementation.");
        
        WriteLine("");
        WriteLine("/// <summary>");
        WriteLine("/// Checks if <paramref name=\"other\"/> is equals to this instance.");
        WriteLine("/// </summary>");
        WriteLine("public bool Equals(" + entityName + " other)");
        WriteLine("{");
        PushIndent(Tabs(1));

        WriteLine("if (other == null) return false;");
        WriteLine("else");
        WriteLine("{");
        PushIndent(Tabs(1));

        sep = "";
        foreach (var pk in primaryKeys) {
            propertyName = RemoveHintPrefix(pk.Name);

            if (string.IsNullOrWhiteSpace(sep)) {
                Write("return ");
            }
            Write(sep);

            if (pk.DataType == DataType.NText || pk.DataType == DataType.Text) {
                Write("string.Equals(" + propertyName + ", other." + propertyName + ", StringComparison.OrdinalIgnoreCase)");
            }
            else {
                Write("(" + propertyName + " == other." + propertyName + ")");
            }

            if (pk.Equals(pks.Last())) {
                WriteLine(";");
            }
            else {
                WriteLine("");
            }

            if (string.IsNullOrWhiteSpace(sep)) { 
                sep = "&& "; 
                PushIndent(Tabs(1));
            }
        }

        ClearIndent();
        PushIndent(Tabs(3));
        WriteLine("}");

        ClearIndent();
        PushIndent(Tabs(2));
        WriteLine("}");

        WriteLine("");
        WriteLine("/// <summary>");
        WriteLine("/// Checks if <paramref name="obj"/> is equals to this instance.");
        WriteLine("/// </summary>");
        WriteLine("public override bool Equals(object obj) => Equals(obj as " + entityName + ");");

        WriteLine("/// <summary>Not required, implemented to avoid warnings, returns base.GetHasCode().</summary>");
        WriteLine("public override int GetHashCode() => base.GetHashCode();");

        ClearIndent();
        PushIndent(Tabs(2));
        WriteLine("");
        WriteLine("#endregion");
    }

    // class.
    ClearIndent();
    PushIndent(Tabs(1));
    WriteLine("}");

    // namespace.
    ClearIndent();
    WriteLine("}");
#><#@ include file=".\Lib\Commons.tt" #>