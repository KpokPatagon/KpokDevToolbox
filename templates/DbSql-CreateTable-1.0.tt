-- <auto-generated>
--   This code was generated by a tool.
--   Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated.
-- </auto-generated>
<#@ template language="C#" #>
<#@ output extension=".CreateTable.sql" encoding="utf-8" #>
<#@ assembly name="netstandard.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="KpokEntityTool.Models" #>
<#@ include file=".\Lib\Commons.tt" #>
<#@ include file=".\Lib\DbSql.tt" #>
<#@ parameter type="KpokEntityTool.Models.Table" name="Source" #>
<#@ parameter type="System.String" name="TemplateFileName" #>
<#@ parameter type="System.String" name="SourceFileName" #>
<#
    bool s;
    string sep;
#>
/*
 * TABLE: <#= Source.Schema #>.<#= Source.Name #>
 *
 * */

-- USE <database-name>
-- GO

-- DROP TABLE [<#= Source.Schema #>].[<#= Source.Name #>]
-- GO

CREATE TABLE [<#= Source.Schema #>].[<#= Source.Name #>] (
<# 
    ClearIndent();

    s = true;
    sep = "  "; 

    PushIndent(Tabs(1));
    foreach (var column in Source.Columns.OrderBy(x => x.Position)) 
    {
        Write(sep);
        WriteLine(BuildColumn(column));
        if (s) { sep = ", "; s = false; }      
    } 

    if (Source.PrimaryKey != null)
    {
        Write(", CONSTRAINT [" + Source.PrimaryKey.Name + "] PRIMARY KEY ");
        Write(Source.PrimaryKey.Type == IndexType.Clustered ? "CLUSTERED" : "NONCLUSTERED");
        Write(" ( ");

        sep = string.Empty;
        foreach (var col in Source.PrimaryKey.Columns.OrderBy(x => x.Position))
        {
            Write(sep);
            Write("[" + col.Name + "]");
            
            if (string.IsNullOrWhiteSpace(sep)) { sep = ", "; }
        }
        WriteLine(" )");
    }

    ClearIndent();
#>
)
GO
<# 
    foreach (var index in Source.Indexes) 
    {
        sep = string.Empty;
        WriteLine(string.Empty);

        Write("CREATE");
        if (index.IsUnique) 
        {
            Write(" UNIQUE");
        }
        Write(" " + (index.Type == IndexType.Clustered ? "CLUSTERED" : "NONCLUSTERED"));
        WriteLine(" INDEX [" + index.Name + "] ON [" + Source.Schema + "].[" + Source.Name + "] (");

        PushIndent(Tabs(1));
        foreach (var col in index.Columns.OrderBy(x => x.Position)) 
        {
            Write(sep);
            Write("[" + col.Name + "]");
            Write((col.Direction == Direction.Ascending ? "" : " DESC"));

            if (string.IsNullOrWhiteSpace(sep)) { sep = ", "; }
        }
        WriteLine(string.Empty);
        PopIndent();

        WriteLine(")");
        PopIndent();

        WriteLine("GO");
    } 

    ClearIndent();

    foreach (var fk in Source.ForeignKeys) 
    {
        WriteLine(string.Empty);
        WriteLine("ALTER TABLE [" + Source.Schema + "].[" + Source.Name + "] ADD CONSTRAINT [" + fk.Name + "]");
        
        PushIndent(Tabs(1));

        Write("FOREIGN KEY ( ");
        sep = string.Empty;
        foreach (var col in fk.Columns) {
            Write(sep + "[" + col.ColumnName + "]");
            if (string.IsNullOrWhiteSpace(sep)) { sep = ", "; }
        }
        WriteLine(" )");

        Write("REFERENCES [" + Source.Schema + "].[" + fk.ReferencedTableName + "] ( ");
        sep = string.Empty;
        foreach (var col in fk.Columns) {
            Write(sep + "[" + col.ReferencedColumnName + "]");
            if (string.IsNullOrWhiteSpace(sep)) { sep = ", "; }
        }
        WriteLine(" )");

        PushIndent(Tabs(1));
        WriteLine("ON DELETE " + BuildReferentialAction(fk.OnDelete));
        WriteLine("ON UPDATE " + BuildReferentialAction(fk.OnUpdate));
        PopIndent();

        PopIndent();

        WriteLine("GO");
    } 

    ClearIndent(); 
#>

-- Tpl: <#= System.IO.Path.GetFileName(TemplateFileName) #>
-- Src: <#= System.IO.Path.GetFileName(SourceFileName) #>
