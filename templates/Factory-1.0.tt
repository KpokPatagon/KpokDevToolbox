<#@ template language="C#" #>
<#@ output extension=".Designer.xcntx" encoding="utf-8" #>
<#@ assembly name="netstandard.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="KpokEntityTool.Models" #>
<#@ include file=".\Lib\Commons.tt" #>
<#@ parameter type="KpokEntityTool.Models.Factory" name="Source" #>
<#@ parameter type="System.String" name="TemplateFileName" #>
<#@ parameter type="System.String" name="SourceFileName" #>
<?xml version="1.0" encoding="utf-8"?>
<appcntx factoryName="<#= Source.Name ?? string.Empty #>">
  <!--
    <auto-generated>
        This code was generated by a tool.
        Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated.
    </auto-generated>
  -->
<#
    string tmp;

    ClearIndent();
    PushIndent(Tabs(1, 2));

    foreach (var obj in Source.Objects)
    {
        tmp = obj.IsSingleton ? " singleton=\"true\"" : string.Empty;

        WriteLine(string.Empty);
        WriteLine("<!-- Object: " + obj.Name + " -->");
        WriteLine("<object name=\"" + obj.Name + "\"" + tmp);
            Write("        type=\"" + obj.Type.Name + ", " + obj.Type.AssemblyName);
        
        if (!string.IsNullOrWhiteSpace(obj.Type.Version))
        {
            Write(", Version=" + obj.Type.Version);
        }
        if (!string.IsNullOrWhiteSpace(obj.Type.Culture))
        {
            Write(", Culture=" + obj.Type.Culture);
        }
        if (!string.IsNullOrWhiteSpace(obj.Type.PublicKeyToken))
        {
            Write(", PublicKeyToken=" + obj.Type.PublicKeyToken);
        }

        WriteLine("\">");

        PushIndent(Tabs(1, 2));

        foreach (var p in obj.Properties)
        {
            Write("<property name=\"" + p.Name + "\"");
            if (p.Optional)
            {
                Write(" optional=\"true\"");
            }
            WriteLine(">");
            
            PushIndent(Tabs(1, 2));

            switch (p.Kind) {
            case FactoryObjectPropertyKind.Map:
                WriteLine("<map>");
                
                PushIndent(Tabs(1, 2));
                foreach (var entry in p.Map)
                {
                    WriteLine("<entry key=\"" + entry.Key + "\" value=\"" + entry.Value + "\"/>");
                }
                PopIndent();

                WriteLine("</map>");
                break;

            case FactoryObjectPropertyKind.Nothing:
                WriteLine("<null/>");
                break;

            case FactoryObjectPropertyKind.Reference:
                WriteLine("<ref object=\"" + p.Reference + "\"/>");
                break;

            case FactoryObjectPropertyKind.Injector:
                if (p.Injector.Args.Any())
                {
                    WriteLine("<runtime object=\"" + p.Injector.ObjectName + "\">");
                    
                    PushIndent(Tabs(1, 2));
                    WriteLine("<data>");

                    PushIndent(Tabs(1, 2));
                    foreach (var arg in p.Injector.Args)
                    {
                        WriteLine("<arg key=\"" + arg.Key + "\" value=\"" + arg.Value + "\"/>");
                    }
                    PopIndent();

                    WriteLine("</data>");
                    PopIndent();

                    WriteLine("</runtime>");
                }
                else
                {
                    WriteLine("<runtime object=\"" + p.Injector.ObjectName + "\"/>");
                }
                break;

            case FactoryObjectPropertyKind.Value:
                WriteLine("<value>" + p.Value + "</value>");
                break;
            }

            PopIndent();

            WriteLine("</property>");

        } // foreach (var p in obj.Properties)

        foreach (var d in obj.Delegates)
        {
            Write("<delegate event=\"" + d.EventName + "\"");
            Write(" object=\"" + d.ObjectName + "\"");
            Write(" method=\"" + d.MethodName + "\"");
            if (d.Optional)
            {
                Write(" optional=\"true\"");
            }
            WriteLine("/>");

        } // foreach (var d in obj.Delegates)

        PopIndent();

        WriteLine("</object>");

    } // foreach (var obj in Source.Objects)

    ClearIndent();
#>

  <!-- Tpl: <#= System.IO.Path.GetFileName(TemplateFileName) #> -->
  <!-- Src: <#= System.IO.Path.GetFileName(SourceFileName) #> -->
</appcntx>
