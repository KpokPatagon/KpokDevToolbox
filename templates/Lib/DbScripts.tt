<#@ assembly name="netstandard.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="KpokEntityTool" #>
<#@ import namespace="KpokEntityTool.Models" #>
<#+
    // retuns a column definition text.
    protected virtual string BuildColumn(Column column)
    {
        string col;
        col = "[" + (column.Name ?? "") + "]";
        col += " " + ToSqlServerDataType(column.DataType);

        if (column.DataType == DataType.Decimal)
        {
            if (!string.IsNullOrWhiteSpace(column.Precision))
            {
                col += "(" + column.Precision;
                if (!string.IsNullOrWhiteSpace(column.Scale))
                {
                    col += ", " + column.Scale;
                }
                col += ")";
            }
        }

        if (column.DataType == DataType.NText || column.DataType == DataType.Text)
        {
            if (!string.IsNullOrWhiteSpace(column.CharacterLength))
            {
                col += "(" + column.CharacterLength + ")";
            }
            else col += "(50)";
        }

        if (column.IsAutonumeric && IsInteger(column.DataType)) 
        {
            col += " IDENTITY(1, 1)";
        }
        col += column.IsNullable ? " NULL" : " NOT NULL";

        if (!string.IsNullOrWhiteSpace(column.DefaultConstraintExpression))
        {
            if (!string.IsNullOrWhiteSpace(column.DefaultConstraintName)) 
            {
                col += " CONSTRAINT [" + column.DefaultConstraintName + "]";
            }
            col += " DEFAULT " + column.DefaultConstraintExpression;
        }

        if (!string.IsNullOrWhiteSpace(column.CheckConstraintExpression))
        {
            if (!string.IsNullOrWhiteSpace(column.CheckConstraintName)) 
            {
                col += " CONSTRAINT [" + column.CheckConstraintName + "]";
            }
            col += " CHECK (" + column.CheckConstraintExpression + ")";
        }

        return col;
    }

    // returns the text for a referential action.
    protected virtual string BuildReferentialAction(ReferentialAction action)
    {
        switch (action) {
        case ReferentialAction.Cascade:     return "CASCADE";
        case ReferentialAction.SetDefault:  return "SET DEFAULT";
        case ReferentialAction.SetNull:     return "SET NULL";
        default:
            return "NO ACTION";
        }
    }

    // returns the SqlServer database type for the specified DataType.
    protected virtual string ToSqlServerDataType(DataType dataType)
    {
        switch (dataType)
        {
        case DataType.BigInt:     return "BIGINT";
        case DataType.Blob:       return "VARBINARY(MAX)";
        case DataType.Boolean:    return "TINYINT";
        case DataType.Clob:       return "TEXT";
        case DataType.DateTime:   return "DATETIME2";
        case DataType.Decimal:    return "NUMERIC";
        case DataType.Float:      return "FLOAT";
        case DataType.Guid:       return "VARCHAR(50)";
        case DataType.Integer:    return "INT";
        case DataType.NClob:      return "NTEXT";
        case DataType.NText:      return "NVARCHAR";
        case DataType.SmallInt:   return "SMALLINT";
        case DataType.Text:       return "VARCHAR";
		case DataType.TimeSpan:   return "BIGINT";
        case DataType.TinyInt:    return "TINYINT";
        default:
            return "VARCHAR";
        }
    }
#>
