// <auto-generated>
//   This code was generated by a tool.
//   Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated.
// </auto-generated>
<#@ template language="C#" #>
<#@ output extension=".Designer.cs" encoding="utf-8" #>
<#@ assembly name="netstandard.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="KpokEntityTool.Models" #>
<#@ include file=".\Lib\Commons.tt" #>
<#@ parameter type="KpokEntityTool.Models.Table" name="Source" #>
<#@ parameter type="System.String" name="TemplateFileName" #>
<#@ parameter type="System.String" name="SourceFileName" #>
<#
    string restype = "null";
    if (!string.IsNullOrWhiteSpace(Source.ResourceTypeName))
    {
        restype = "typeof(" + Source.ResourceTypeName + ")";
    }
#>
namespace <#= Source.Namespace ?? string.Empty #>
{
    using System;
    using Inetdev.Data;
    using Inetdev.Data.DatabaseSchema;

<#
	ClearIndent();
    
	WriteSummary(1, Source.Summary); 
    
	PushIndent(Tabs(1));
	WriteLine("/// <remarks>");
	WriteLine("///     " + (Source.Caption ?? Source.Name ?? string.Empty));
	WriteLine("///     " + (Source.Description ?? string.Empty));
	WriteLine("/// </remarks>");
	WriteLine(BuildModifier(Source.Access) + " partial class " + (Source.ClassName ?? string.Empty) + " : ITableConfiguration");
	WriteLine("{");

	ClearIndent();
#>
        /// <summary>
        /// Returns the configuration of: <#= Source.Name ?? string.Empty #>
        /// </summary>
        public virtual Table GetTable()
        {
<#
PushIndent(Tabs(3));

WriteLine("Table configuration = new Table");
WriteLine("{");
PushIndent(Tabs(1));

    WriteLine("Name = \"" + (Source.Name ?? string.Empty) + "\",");
    WriteLine("Schema = " + (string.IsNullOrWhiteSpace(Source.Schema) ? "null" : "\"" + Source.Schema + "\"") + ",");
    WriteLine("IsView = " + (Source.IsView ? "true" : "false") + ",");
    WriteLine("Kindom = DatabaseObjectKindom." + Convert.ToString(Source.Kindom) + ",");
    WriteLine("FileGroup = " + (string.IsNullOrWhiteSpace(Source.FileGroup) ? "null" : "\"" + Source.FileGroup + "\"") + ",");
    WriteLine("ResourceType = " + restype + ",");
    WriteLine("Caption = " + (string.IsNullOrWhiteSpace(Source.ResourceFileName) ? "\"" + ReplaceNewLine(Source.Caption) + "\"" : "\"" + BuildTableResourceName(Source.Schema, Source.Name) + "_Caption\"") + ",");
    WriteLine("Description = " + (string.IsNullOrWhiteSpace(Source.ResourceFileName) ? "\"" + ReplaceNewLine(Source.Description) + "\"" : "\"" + BuildTableResourceName(Source.Schema, Source.Name) + "_Description\"") + ",");
    WriteLine("Grant = new Grant");
    WriteLine("{");
    PushIndent(Tabs(1));

        WriteLine("DatabaseObjectName = new TableName { Schema = " + (string.IsNullOrWhiteSpace(Source.Schema) ? "null" : "\"" + Source.Schema + "\"") + ", Name = \"" + (Source.Name ?? string.Empty) + "\" },");
        WriteLine("Permission = Permission.Delete | Permission.Insert | Permission.Select | Permission.Update,");
        WriteLine("Grantee = null");

    PopIndent();
    WriteLine("},");

PopIndent();
WriteLine("};");

WriteLine(string.Empty);
WriteLine("TableColumn column;");

if (Source.Columns.Any(c => !string.IsNullOrWhiteSpace(c.DefaultConstraintExpression) || !string.IsNullOrWhiteSpace(c.CheckConstraintExpression)))
{
    WriteLine("ColumnConstraint constraint;");
}
if (Source.PrimaryKey != null || Source.Indexes.Count > 0)
{
    WriteLine("Index index;");
}
if (Source.ForeignKeys.Count > 0)
{
    WriteLine("ForeignKey fk;");
}
foreach (var col in Source.Columns.OrderBy(c => c.Position))
{
    WriteLine(string.Empty);
    Write("column = new TableColumn {");
    Write(" Name = \"" + col.Name + "\"");
    Write(", DataType = DbType." + Convert.ToString(col.DataType));
    Write(", Position = " + Convert.ToString(col.Position));
    Write(", IsAutonumeric = " + (col.IsAutonumeric ? "true" : "false"));
    Write(", IsNullable = " + (col.IsNullable ? "true" : "false"));
    if (col.DataType == DataType.Decimal)
    {
        Write(", Precision = " + (string.IsNullOrWhiteSpace(col.Precision) ? "18" : col.Precision));
        Write(", Scale = " + (string.IsNullOrWhiteSpace(col.Scale) ? "0" : col.Scale));
    }
    else if (col.DataType == DataType.Text || col.DataType == DataType.NText)
    {
        Write(", CharacterLength = " + (string.IsNullOrWhiteSpace(col.CharacterLength) ? "50" : col.CharacterLength));
    }
    Write(", Caption = \"" + (string.IsNullOrWhiteSpace(Source.ResourceFileName) ? col.Caption : BuildColumnCaptionResourceName(Source.Schema, Source.Name, col.Name)) + "\"");
    Write(", ResourceType = " + restype);
    WriteLine(", Table = configuration };");

    if (!string.IsNullOrWhiteSpace(col.DefaultConstraintExpression))
    {
        WriteLine(string.Empty);
        Write("constraint = new ColumnConstraint {");
        Write(" Name = \"" + col.DefaultConstraintName + "\", ConstraintType = ConstraintType.Default");
        Write(", Expression = \"" + col.DefaultConstraintExpression + "\"");
        WriteLine(", Column = column };");
        WriteLine("column.Constraints.Add(constraint);");
    }

    if (!string.IsNullOrWhiteSpace(col.CheckConstraintExpression))
    {
        WriteLine(string.Empty);
        Write("constraint = new ColumnConstraint {");
        Write(" Name = \"" + col.CheckConstraintName + "\", ConstraintType = ConstraintType.Check");
        Write(", Expression = \"" + col.CheckConstraintExpression + "\"");
        WriteLine(", Column = column };");
        WriteLine("column.Constraints.Add(constraint);");
    }

    if (!string.IsNullOrWhiteSpace(col.DefaultConstraintExpression) || !string.IsNullOrWhiteSpace(col.CheckConstraintExpression))
    {
        WriteLine(string.Empty);
    }

    WriteLine("configuration.Columns.Add(column);");
}

if (Source.PrimaryKey != null)
{
    WriteLine(string.Empty);
    Write("index = new Index {");
    Write(" Name = \"" + Source.PrimaryKey.Name + "\"");
    Write(", IndexType = IndexType." + Convert.ToString(Source.PrimaryKey.Type));
    Write(", IsUnique = " + (Source.PrimaryKey.IsUnique ? "true" : "false"));
    Write(", FileGroup = " + (string.IsNullOrWhiteSpace(Source.PrimaryKey.FileGroup) ? "null" : "\"" + Source.PrimaryKey.FileGroup + "\""));
    WriteLine(", Table = configuration };");

    foreach (var icol in Source.PrimaryKey.Columns.OrderBy(i => i.Position))
    {
        Write("index.Columns.Add(new IndexColumn {");
        Write(" Name = \"" + icol.Name + "\"");
        Write(" , Direction = Direction." + Convert.ToString(icol.Direction));
        Write(" , Position = " + Convert.ToString(icol.Position));
        WriteLine(", Index = index });");
    }

    WriteLine("configuration.PrimaryKey = index;");
}

foreach (var idx in Source.Indexes)
{
    WriteLine(string.Empty);
    Write("index = new Index {");
    Write(" Name = \"" + idx.Name + "\"");
    Write(", IndexType = IndexType." + Convert.ToString(idx.Type));
    Write(", IsUnique = " + (idx.IsUnique ? "true" : "false"));
    Write(", FileGroup = " + (string.IsNullOrWhiteSpace(idx.FileGroup) ? "null" : "\"" + idx.FileGroup + "\""));
    WriteLine(", Table = configuration };");

    foreach (var icol in idx.Columns.OrderBy(i => i.Position))
    {
        Write("index.Columns.Add(new IndexColumn {");
        Write(" Name = \"" + icol.Name + "\"");
        Write(" , Direction = Direction." + Convert.ToString(icol.Direction));
        Write(" , Position = " + Convert.ToString(icol.Position));
        WriteLine(", Index = index });");
    }

    WriteLine("configuration.Indexes.Add(index);");
}

foreach (var fk in Source.ForeignKeys)
{
    WriteLine(string.Empty);
    Write("fk = new ForeignKey {");
    Write(" Name = \"" + fk.Name + "\"");
    Write(", OnDelete = ReferentialAction." + Convert.ToString(fk.OnDelete));
    Write(", OnUpdate = ReferentialAction." + Convert.ToString(fk.OnUpdate));
    Write(", ReferencedTable = new TableName { Schema = " + (string.IsNullOrWhiteSpace(fk.ReferencedTableSchema) ? "null" : "\"" + fk.ReferencedTableSchema + "\"") + ", Name = \"" + fk.ReferencedTableName + "\" }");
    WriteLine(", Table = configuration };");

    foreach (var fkcol in fk.Columns)
    {
        Write("fk.Columns.Add(new ForeignKeyColumn {");
        Write(" ColumnName = \"" + fkcol.ColumnName + "\"");
        Write(", ReferencedColumnName = \"" + fkcol.ReferencedColumnName + "\"");
        WriteLine(", ForeignKey = fk });");
    }

    WriteLine("configuration.ForeignKeys.Add(fk);");
}

ClearIndent();
#>

            return configuration;
        }
    }
}
// Tpl: <#= System.IO.Path.GetFileName(TemplateFileName) #>
// Src: <#= System.IO.Path.GetFileName(SourceFileName) #>
