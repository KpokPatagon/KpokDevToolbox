// <auto-generated>
//   This code was generated by a tool.
//   Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated.
// </auto-generated>
// Tpl: <#= System.IO.Path.GetFileName(TemplateFileName) #>
// Src: <#= System.IO.Path.GetFileName(SourceFileName) #>
<#@ template language="C#" #>
<#@ output extension=".Designer.cs" encoding="utf-8" #>
<#@ assembly name="netstandard.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="KpokEntityTool.Models" #>
<#@ parameter type="KpokEntityTool.Models.DataService" name="Source" #>
<#@ parameter type="System.String" name="TemplateFileName" #>
<#@ parameter type="System.String" name="SourceFileName" #>
<#
    int z;
    int pn;
    string pb;
    string sep;
    string tmp;
    string summary;
    string className;
    string paramName;
    string returnType;

    Field fld;
    Parameter par;
    FilterPredicate predicate;
    List<FilterPredicate> predicates;

    className = RemoveHintPrefix(Source.Name ?? "");

    WriteLine("using KpokPatagon.Data;");
    WriteLine("using KpokPatagon.Data.Query;");
    WriteLine("using KpokPatagon.DependencyInjection;");
    WriteLine("using System;");
    WriteLine("using System.Linq;");
    WriteLine("using System.Threading.Tasks;");
    WriteLine("using System.Collections.Generic;");

    if (Source.ExtendedProperties.Any(x => x.Key == "using")) {
        WriteLine("");
        foreach (var extp in Source.ExtendedProperties.Where(x => x.Key == "using")) {
            WriteLine("using " + extp.Value + ';');
        }
    }

    WriteLine("");
    WriteLine("namespace " + (Source.Namespace ?? ""));
    WriteLine("{");

    summary = Source.Summary ?? "";
    summary += "\nRelease: " + (Source.Release ?? "");
    WriteSummary(1, summary);
    WriteRemarks(1, Source.Remarks);

    if (!string.IsNullOrWhiteSpace(Source.CommandBuilder)) {
        WriteLine("[InjectServiceName(\"CommandBuilder\", \"" + Source.CommandBuilder + "\")]");
    }
    if (!string.IsNullOrWhiteSpace(Source.DataModelCommandBuilder)) {
        WriteLine("[InjectServiceName(\"DataModelCommandBuilder\", \"" + Source.CommandBuilder + "\")]");
    }
    if (!string.IsNullOrWhiteSpace(Source.DataModelAuditor)) {
        WriteLine("[InjectServiceType(\"DataModelAuditor\", typeof(" + Source.DataModelAuditor + "))]");
    }
    if (!string.IsNullOrWhiteSpace(Source.Identity)) {
        WriteLine("[InjectServiceType(\"Identity\", typeof(" + Source.Identity + "))]");
    }
    if (!string.IsNullOrWhiteSpace(Source.Numerator)) {
        WriteLine("[InjectServiceType(\"Numerator\", typeof(" + Source.Numerator + "))]");
    }
    if (!string.IsNullOrWhiteSpace(Source.Validator)) {
        WriteLine("[InjectServiceType(\"Validator\", typeof(" + Source.Validator + "))]");
    }

    WriteLine(BuildModifier(Source.Access) + " partial class " + className + " : DataService");
    WriteLine("{");

    ClearIndent();
    PushIndent(Tabs(2));

    tmp = !string.IsNullOrWhiteSpace(Source.Alias) ? Source.Alias : (Source.Table ?? "");
    WriteLine("private string _alias;");
    WriteLine("/// <summary>");
    WriteLine("/// Gets or sets the alias for the table.");
    WriteLine("/// </summary>");
    WriteLine("public override string Alias");
    WriteLine("{");
    WriteLine("    get");
    WriteLine("    {");
    WriteLine("        if (string.IsNullOrWhiteSpace(_alias))");
    WriteLine("            _alias = \"" + tmp + "\";");
    WriteLine("        return _alias;");
    WriteLine("    }");
    WriteLine("    set { _alias = value; }");
    WriteLine("}");

    tmp = Source.Table ?? "";
    WriteLine("");
    WriteLine("private string _table;");
    WriteLine("/// <summary>");
    WriteLine("/// Gets or sets the name of the table.");
    WriteLine("/// </summary>");
    WriteLine("public override string Table");
    WriteLine("{");
    WriteLine("    get");
    WriteLine("    {");
    WriteLine("        if (string.IsNullOrWhiteSpace(_table))");
    WriteLine("            _table = \"" + tmp + "\";");
    WriteLine("        return _table;");
    WriteLine("    }");
    WriteLine("    set { _table = value; }");
    WriteLine("}");

    WriteLine("");
    WriteLine("private IDictionary<string, Field> _fields;");
    WriteLine("/// <summary>");
    WriteLine("/// Gets or sets the collection of table fields definition.");
    WriteLine("/// </summary>");
    WriteLine("public override IDictionary<string, Field> Fields");
    WriteLine("{");
    WriteLine("    get");
    WriteLine("    {");
    WriteLine("        _fields ??= new Dictionary<string, Field>");
    WriteLine("        {");
    PushIndent(Tabs(3));
    for (int i = 0; i < Source.Fields.Count; i++) {
        fld = Source.Fields[i];

        Write("[\"" + (fld.FieldKey ?? "") + "\"] =");
        Write(" new Field(\"" + (fld.FieldName ?? "") + "\",");
        Write(" DbType." + fld.DataType + ",");
        Write(" " + (string.IsNullOrWhiteSpace(fld.PrimaryKey) ? "0" : fld.PrimaryKey + ","));
        Write(" AutomaticType." + fld.AutomaticType);

        if (i < Source.Fields.Count - 1) {
            WriteLine("),");
        }
        else {
            WriteLine(")");
        }
    }
    PopIndent();
    WriteLine("        };");
    WriteLine("        return _fields;");
    WriteLine("    }");
    WriteLine("    set { _fields = value; }");
    WriteLine("}");

    WriteLine("");
    WriteLine("/// <summary>");
    WriteLine("/// Creates a new instance of <see cref=\"" + className + "\"/>.");
    WriteLine("/// </summary>");
    WriteLine("public " + className + "()");
    WriteLine("{");
    WriteLine("    Schema = " + (!string.IsNullOrWhiteSpace(Source.Schema) ? "\"" + Source.Schema + "\";" : "null;"));
    WriteLine("    SequenceName = " + (!string.IsNullOrWhiteSpace(Source.SequenceName) ? "\"" + Source.SequenceName + "\";" : "null;"));
    WriteLine("}");

    foreach (var filter in Source.Filters)
    {
        pn = 0;
        returnType = filter.IsCollection ? "IList<" + (filter.ReturnType ?? "") + ">" : (filter.ReturnType ?? "");
        if (filter.IsAsync) {
            returnType = "async Task<" + returnType + ">";
        }

        ClearIndent();
        WriteLine("");
        WriteSummary(2, filter.Summary);
        foreach (var parameter in filter.Parameters.Where(x => !string.IsNullOrWhiteSpace(x.Summary))) {
            WriteLine("/// <param name=\"" + RemoveHintPrefix(parameter.Name) + "\">" + parameter.Summary + "</param>" );
        }

        Write(BuildModifier(filter.Access) + " virtual " + returnType + " " + (filter.Name ?? "") + "(");
        Write(BuildArguments(filter.Parameters));
        WriteLine(")");
        WriteLine("{");
        PushIndent(Tabs(1));

        WriteLine("EnsureState();");

        foreach (var parameter in filter.Parameters) {
            if (HasHintPrefix(parameter.Name, "$(NullCheck)", out paramName)) {
                WriteLine("if (" + paramName + " == null)");
                WriteLine("    throw new ArgumentNullException(nameof(" + paramName + "));");
            }
        }

        WriteLine("");
        WriteLine("var s = new SelectStatement(this);");

        if (filter.Predicates.Any()) {
            predicates = filter.Predicates.OrderBy(x => x.Index).ToList();

            WriteLine("");
            WriteLine("s.WhereConditions.Add(new SearchCondition(");
            sep = " ";

            PushIndent(Tabs(1));
            for (int pi = 0; pi < predicates.Count; pi++) {
                predicate = predicates[pi];

                fld = Source.Fields.FirstOrDefault(x => x.FieldKey == predicate.FieldKey);
                if (fld != null)
                {
                    z = filter.CountGroupsStartedWith(predicate);
                    if (z > 0)
                    {
                        sep = " ";
                        for (int i = 0; i < z; i++)
                        {
                            tmp = "";
                            if (pi > 0 && i == 0) 
                            {
                                tmp += ",";
                            }
                            tmp += "new SearchCondition(";
                            if (i == 0)
                            {
                                tmp += ToRelationalOperatorEnumText(predicate.Relation) + ",";
                            }
                            WriteLine(tmp);
                            PushIndent(Tabs(1));
                        }
                    }

                    pb = sep + "new SimplePredicate(";
                    if (z == 0 && predicate.Relation != RelationOperator.None)
                    {
                        pb += ToRelationalOperatorEnumText(predicate.Relation) + ", ";
                    }
                    pb += "new PredicateColumn(Fields[FKey." + fld.FieldKey + "]";
                    if (predicate.Operator != ComparisonOperator.In && predicate.Operator != ComparisonOperator.NotIn) {
                        pb += ", \"p_" + fld.FieldName + "_" + Convert.ToString(pn++) + "\"";
                    }
                    pb += ")";
                    pb += ", ComparisonOperator." + Convert.ToString(predicate.Operator);
                    pb += ", " + predicate.Value;
                    pb += ")";

                    if (sep == " ") {
                        sep = ",";
                    }

                    WriteLine(pb);

                    z = filter.CountGroupsEndedWith(predicate);
                    if (z > 0) 
                    {
                        for (int i = 0; i < z; i++)
                        {
                            PopIndent();
                            WriteLine(")");
                        }
                    }
                }
            }
            PopIndent();
            WriteLine("));");
        }

        if (filter.OrderFields.Any()) {
            WriteLine("");
            foreach (var order in filter.OrderFields.OrderBy(x => x.Index))
            {
                fld = Source.Fields.FirstOrDefault(x => x.FieldKey == order.FieldKey);
                if (fld != null)
                {
                    tmp = "s.OrderColumns.Add(new OrderColumn(";
                    tmp += "Fields[FKey." + fld.FieldKey + "]";
                    tmp += ", SortDirection." + order.Direction;
                    tmp += "));";
                    WriteLine(tmp);
                }
            }
        }

        // return value.
        par = filter.Parameters.FirstOrDefault(x => x.IsParent);

        WriteLine("");
        if (filter.IsAsync)
        {
            Write("var result = await BuildModelListAsync<" + filter.ReturnType + ">(s");
            if (par != null) { 
                Write(", " + RemoveHintPrefix(par.Name)); 
            }
            WriteLine(");");

            Write("return result");
            if (!filter.IsCollection) {
                Write(".FirstOrDefault()");
            }
            WriteLine(";");
        }
        else
        {
            Write("var result = BuildModelList<" + filter.ReturnType + ">(s");
            if (par != null) { 
                Write(", " + RemoveHintPrefix(par.Name)); 
            }
            WriteLine(");");

            Write("return result");
            if (!filter.IsCollection) {
                Write(".FirstOrDefault()");
            }
            WriteLine(";");
        }

        ClearIndent();
        PushIndent(Tabs(2));
        WriteLine("}");
    }

    ClearIndent();
    PushIndent(Tabs(2));

    WriteLine("");
    WriteLine("#region Field key constants");
    WriteLine("");

    WriteLine("/// <summary>");
    WriteLine("/// Field key constants for <b>" + className + "</b>.");
    WriteLine("/// </summary>");
    WriteLine("public static class FKey");
    WriteLine("{");
    PushIndent(Tabs(1));
    foreach (var f in Source.Fields)
    {
        WriteLine("/// <summary>");
        WriteLine("/// " + (f.FieldName ?? "") + " (" + f.DataType + ").");
        WriteLine("/// </summary>");
        WriteLine("public const string " + (f.FieldKey ?? "") + " = \"" + (f.FieldKey ?? "") + "\";");
    }
    PopIndent();
    WriteLine("}");

    WriteLine("");
    WriteLine("#endregion");

    // class.
    ClearIndent();
    PushIndent(Tabs(1));
    WriteLine("}");

    // namespace.
    ClearIndent();
    WriteLine("}");
#><#@ include file=".\Lib\Commons.tt" #>