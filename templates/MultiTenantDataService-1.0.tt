// <auto-generated>
//   This code was generated by a tool.
//   Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated.
// </auto-generated>
<#@ template language="C#" #>
<#@ output extension=".Designer.cs" encoding="utf-8" #>
<#@ assembly name="netstandard.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="KpokEntityTool.Models" #>
<#@ include file=".\Lib\Commons.tt" #>
<#@ include file=".\Lib\DataServicesLib.tt" #>
<#@ parameter type="KpokEntityTool.Models.DataService" name="Source" #>
<#@ parameter type="System.String" name="TemplateFileName" #>
<#@ parameter type="System.String" name="SourceFileName" #>
<#
    int z;
    string pb;
    string sep;
    string tmp;
    string paramName;
    string returnType;

    List<string> pnames;
    
    Field fld;
    Field pkfld;
    Parameter par;
    FilterPredicate predicate;
    List<FilterPredicate> predicates;

    pkfld = Source.Fields.FirstOrDefault(x => x.IsPartitionKey);

    ClearIndent();
#>
namespace <#= Source.Namespace #>
{
    using System;
    using System.Threading.Tasks;
    using System.Collections.Generic;

    using Inetdev.Context;
    using Inetdev.Data;
    using Inetdev.Data.Query;
    using Inetdev.Multitenancy;

<# 
    WriteSummary(1, Source.Summary); 
    PushIndent(Tabs(1));
    WriteLine(BuildModifier(Source.Access) + " partial class " + Source.Name + " : MultitenantDataServices");
    ClearIndent();
#>
    {
        /// <summary>
        /// Creates a new instance of <see cref="<#= Source.Name #>"/>.
        /// </summary>
        public <#= Source.Name #>()
        {
            Schema = <#= string.IsNullOrWhiteSpace(Source.Schema) ? "null" : "\"" + Source.Schema + "\"" #>;
            SequenceName = <#= string.IsNullOrWhiteSpace(Source.SequenceName) ? "null" : "\"" + Source.SequenceName + "\"" #>;
        }

        string _table;
        /// <summary>
        /// Gets the table name.
        /// </summary>
        public override string Table
        {
            get 
            {
                if (string.IsNullOrWhiteSpace(_table))
                    _table = "<#= Source.Table #>";
                return _table;
            }
            set { _table = value; }
        }

        string _alias;
        /// <summary>
        /// Gets an alias for the underlaying table.
        /// </summary>
        public override string Alias
        {
            get 
            {
                if (string.IsNullOrWhiteSpace(_alias))
                    _alias = "<#= string.IsNullOrWhiteSpace(Source.Alias) ? Source.Table : Source.Alias #>";
                return _alias;
            }
            set { _alias = value; }
        }

        IDictionary<string, Field> _flds;
        /// <summary>
        /// A collection of table field definition.
        /// </summary>
        public override IDictionary<string, Field> Fields
        {
            get
            {
                if (_flds == null) 
                {
                    _flds = new Dictionary<string, Field>(<#= Source.Fields.Count #>);
<# foreach (var f in Source.Fields) { #>
                    _flds["<#= f.FieldKey #>"] = new Field("<#= f.FieldName #>", DbType.<#= f.DataType #>, <#= string.IsNullOrWhiteSpace(f.PrimaryKey) ? "0" : f.PrimaryKey #>, AutomaticType.<#= f.AutomaticType #>);
<# } #>
                }
                return _flds;
            }
            set { _flds = value; }
        }
<#
// data service filters
foreach (var filter in Source.Filters)
{
    returnType = filter.IsCollection ? "IEnumerable<" + filter.ReturnType + ">" : filter.ReturnType;
    if (filter.IsAsync)
    {
        returnType = "async Task<" + returnType + ">";
    }

    ClearIndent();
    WriteLine(string.Empty);
    WriteSummary(2, filter.Summary);
    foreach (var parameter in filter.Parameters) {
        WriteLine(Tabs(2) + "/// <param name=\"" + RemoveHintPrefix(parameter.Name) + "\">" + (parameter.Summary ?? string.Empty) + "</param>" );
    }
    WriteLine(Tabs(2) + BuildModifier(filter.Access) + " virtual " + returnType + " " + filter.Name + "(" + BuildArguments(filter.Parameters) + ")");
    WriteLine(Tabs(2) + "{");
    WriteLine(Tabs(3) + "EnsureObjectState();");

    foreach (var parameter in filter.Parameters) {
        if (HasHintPrefix("$(NC)", parameter.Name, out paramName)) {
            WriteLine(Tabs(3) + "if (" + RemoveHintPrefix(parameter.Name) + " == null)");
            WriteLine(Tabs(4) + "throw new ArgumentNullException(nameof(" + RemoveHintPrefix(parameter.Name) + "));");
        }
    }

    WriteLine(string.Empty);
    WriteLine(Tabs(3) + "SelectStatement s = new SelectStatement(this);");

    if (filter.Predicates.Any())
    {
        pnames = new List<string>(filter.Predicates.Count);
        predicates = filter.Predicates.OrderBy(x => x.Index).ToList();

        WriteLine(string.Empty);
        ClearIndent();
        PushIndent(Tabs(3));

        WriteLine("s.WhereConditions.Add(new SearchCondition(");
        sep = " ";

        PushIndent(Tabs(1));
        for (int pi = 0; pi < predicates.Count; pi++)
        {
            predicate = predicates[pi];

            fld = Source.Fields.FirstOrDefault(x => x.FieldKey == predicate.FieldKey);
            if (fld != null)
            {
                z = filter.CountGroupsStartedWith(predicate);
                if (z > 0)
                {
                    sep = " ";
                    for (int i = 0; i < z; i++)
                    {
                        tmp = "";
                        if (pi > 0 && i == 0) 
                        {
                            tmp += ",";
                        }
                        tmp += "new SearchCondition(";
                        if (i == 0)
                        {
                            tmp += ToRelationalOperatorEnumText(predicate.Relation) + ",";
                        }

                        WriteLine(tmp);
                        PushIndent(Tabs(1));
                    }
                }

                pb = sep + "new SimplePredicate(";
                if (z == 0 && predicate.Relation != RelationOperator.None)
                {
                    pb += ToRelationalOperatorEnumText(predicate.Relation) + ", ";
                }
                pb += "new PredicateColumn(Fields[FKey." + fld.FieldKey + "], \"" + GetUniqueParameterName(pnames, fld.FieldName) + "\")";
                pb += ", ComparisonOperator." + Convert.ToString(predicate.Operator);
                pb += ", " + predicate.Value;
                pb += ")";

                if (sep == " ") { sep = ","; }

                WriteLine(pb);

                z = filter.CountGroupsEndedWith(predicate);
                if (z > 0) 
                {
                    for (int i = 0; i < z; i++)
                    {
                        PopIndent();
                        WriteLine(")");
                    }
                }
            }
        }
        PopIndent();

        WriteLine("));");
        ClearIndent();

    } // if (filter.Predicates.Any())

    if (pkfld != null)
    {
        PushIndent(Tabs(3));
        WriteLine(string.Empty);
        WriteLine("AppendPartitionKeyPredicate(s, Fields[FKey." + pkfld.FieldKey + "]);");
        ClearIndent();
    }

    if (filter.OrderFields.Any())
    {
        PushIndent(Tabs(3));
        WriteLine(string.Empty);

        foreach (var order in filter.OrderFields.OrderBy(x => x.Index))
        {
            fld = Source.Fields.FirstOrDefault(x => x.FieldKey == order.FieldKey);
            if (fld != null)
            {
                tmp = "s.OrderColumns.Add(new OrderColumn(";
                tmp += "Fields[FKey." + fld.FieldKey + "]";
                tmp += ", SortDirection." + Convert.ToString(order.Direction);
                tmp += "));";

                WriteLine(tmp);
            }
        }

        ClearIndent();

    } // if (filter.OrderFields.Any())

    // return value.
    par = filter.Parameters.FirstOrDefault(x => x.IsParent);

    PushIndent(Tabs(3));

    WriteLine(string.Empty);

    if (filter.IsAsync)
    {
        Write("return await BuildModelListAsync<" + filter.ReturnType + ">(s");
        if (par != null) 
        { 
            Write(", " + RemoveHintPrefix(par.Name)); 
        }
    }
    else
    {
        Write("return BuildModelList<" + filter.ReturnType + ">(s");
        if (par != null) 
        { 
            Write(", " + RemoveHintPrefix(par.Name)); 
        }
    }

    WriteLine(");");
    
    ClearIndent();

    WriteLine(Tabs(2) + "}");

} // foreach (var filter in Source.Filters)

ClearIndent();
#>

        #region FieldKey constants

        /// <summary>
        /// Field definition key constants for <#= Source.Name #>
        /// </summary>
        public static class FKey
        {
<# foreach (var f in Source.Fields) { #>
            /// <summary>
            /// <#= f.FieldKey #>, <#= f.FieldName #>, <#= f.PrimaryKey #>, DbType.<#= f.DataType #>.
            /// </summary>
            public const string <#= f.FieldKey #> = "<#= f.FieldKey #>";
<# } #>
        }

        #endregion
    }
}
// Tpl: <#= System.IO.Path.GetFileName(TemplateFileName) #>
// Src: <#= System.IO.Path.GetFileName(SourceFileName) #>
