-- <auto-generated>
--   This code was generated by a tool.
--   Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated.
-- </auto-generated>
-- Tpl: <#= System.IO.Path.GetFileName(TemplateFileName) #>
-- Src: <#= System.IO.Path.GetFileName(SourceFileName) #>
<#@ template language="C#" #>
<#@ output extension=".CreateTable.sql" encoding="utf-8" #>
<#@ assembly name="netstandard.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="KpokEntityTool.Models" #>
<#@ parameter type="KpokEntityTool.Models.Table" name="Source" #>
<#@ parameter type="System.String" name="TemplateFileName" #>
<#@ parameter type="System.String" name="SourceFileName" #>
<#
    bool s;
    string sep;
    string tableName = "[" + (Source.Schema ?? "") + "].[" + (Source.Name ?? "") + "]";

    ClearIndent();
    WriteLine("/*");
    WriteLine(" * TABLE: " + tableName);
    WriteLine(" *");
    WriteLine(" * */");

    WriteLine("");
    WriteLine("-- USE <database-name>");
    WriteLine("-- GO");

    WriteLine("");
    WriteLine("-- DROP TABLE " + tableName);
    WriteLine("-- GO");

    WriteLine("");
    WriteLine("CREATE TABLE " + tableName);
    WriteLine("(");
    PushIndent(Tabs(1));

    s = true;
    sep = "  ";
    foreach (var column in Source.Columns.OrderBy(x => x.Position))
    {
        Write(sep);
        WriteLine(BuildColumn(column));
        if (s) { sep = ", "; s = false; }
    }

    if (Source.PrimaryKey != null)
    {
        Write(", CONSTRAINT [" + (Source.PrimaryKey.Name ?? "") + "] PRIMARY KEY");
        Write(Source.PrimaryKey.Type == IndexType.Clustered ? " CLUSTERED" : " NONCLUSTERED");
        Write(" (");

        s = true;
        sep = "";
        foreach (var col in Source.PrimaryKey.Columns.Where(x => !x.IsIncludedColumn).OrderBy(x => x.Position))
        {
            Write(sep);
            Write("[" + (col.Name ?? "") + "]");
            Write(col.Direction == Direction.Ascending ? "" : " DESC");

            if (s) { sep = ", "; s = false; }
        }
        WriteLine(")");

        if (Source.PrimaryKey.Columns.Any(x => x.IsIncludedColumn))
        {
            Write("INCLUDE (");

            sep = "";
            foreach (var col in Source.PrimaryKey.Columns.Where(x => x.IsIncludedColumn).OrderBy(x => x.Position))
            {
                Write(sep);
                Write("[" + (col.Name ?? "") + "]");
                if (sep == "") { sep = " , "; }
            }

            WriteLine(")");
        }
    }

    PopIndent();
    WriteLine(")");
    WriteLine("GO");

    foreach (var index in Source.Indexes)
    {
        WriteLine("");
        Write("CREATE");
        if (index.IsUnique) {
            Write(" UNIQUE");
        }
        Write(index.Type == IndexType.Clustered ? " CLUSTERED" : " NONCLUSTERED");
        WriteLine(" INDEX [" + (index.Name ?? "") + "] ON " + tableName);
        WriteLine("(");
        PushIndent(Tabs(1));

        s = true;
        sep = "  ";
        foreach (var col in index.Columns.Where(x => !x.IsIncludedColumn).OrderBy(x => x.Position))
        {
            Write(sep);
            Write("[" + (col.Name ?? "") + "]");
            WriteLine(col.Direction == Direction.Ascending ? "" : " DESC");

            if (s) { sep = ", "; s = false; }
        }

        PopIndent();
        WriteLine(")");

        if (index.Columns.Any(x => x.IsIncludedColumn))
        {
            Write("INCLUDE (");

            sep = "";
            foreach (var col in index.Columns.Where(x => x.IsIncludedColumn).OrderBy(x => x.Position))
            {
                Write(sep);
                Write("[" + (col.Name ?? "") + "]");
                if (sep == "") { sep = " , "; }
            }

            WriteLine(")");
        }
        WriteLine("GO");
    }

    foreach (var fk in Source.ForeignKeys)
    {
        WriteLine("");
        WriteLine("ALTER TABLE " + tableName + " ADD CONSTRAINT [" + (fk.Name ?? "") + "]");
        PushIndent(Tabs(1));

        sep = "";
        Write("FOREIGN KEY (");
        foreach (var col in fk.Columns) {
            Write(sep + "[" + (col.ColumnName ?? "") + "]");
            if (sep == "") { sep = " , "; }
        }
        WriteLine(")");

        sep = "";
        Write("REFERENCES [" + (fk.ReferencedTableSchema) + "].[" + (fk.ReferencedTableName) + "] (");
        foreach (var col in fk.Columns) {
            Write(sep + "[" + (col.ReferencedColumnName ?? "") + "]");
            if (sep == "") { sep = " , "; }
        }
        WriteLine(")");

        PushIndent(Tabs(1));
        WriteLine("ON DELETE " + BuildReferentialAction(fk.OnDelete));
        WriteLine("ON UPDATE " + BuildReferentialAction(fk.OnUpdate));
        PopIndent();

        PopIndent();
        WriteLine("GO");
    }

#><#@ include file=".\Lib\Commons.tt" #><#@ include file=".\Lib\DbScripts.tt" #>