// <auto-generated>
//   This code was generated by a tool.
//   Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated.
// </auto-generated>
// Tpl: <#= System.IO.Path.GetFileName(TemplateFileName) #>
// Src: <#= System.IO.Path.GetFileName(SourceFileName) #>
<#@ template language="C#" #>
<#@ output extension=".ts" encoding="utf-8" #>
<#@ assembly name="netstandard.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="KpokEntityTool.Models" #>
<#@ parameter type="KpokEntityTool.Models.Entity" name="Source" #>
<#@ parameter type="System.String" name="TemplateFileName" #>
<#@ parameter type="System.String" name="SourceFileName" #>
<#@ parameter type="KpokEntityTool.Models.ExtendedPropertyCollection" name="ExtendedProperties" #>
<#
    string typeName;
    string propName;
    string className = (Source.Name ?? "");
    bool includePagedListing = "Yes".Equals(GetExtPropValue(ExtendedProperties, "IncludePagedListing", "No"), StringComparison.OrdinalIgnoreCase);

    if (includePagedListing) {
        WriteLine("");
        WriteLine("import { PageInfo } from '@app/shared/models/kpokpatagon-data-filtering';");
    }

    WriteLine("");
    WriteLine("/** " + ReplaceNewLine(Source.Summary) + " */");
    WriteLine("export interface I" + className + " {");
    PushIndent(T(1, 2));

    foreach (var property in Source.Properties.Where(x => !x.IsPartitionKey))
    {
        typeName = string.IsNullOrWhiteSpace(property.CastDataType)
            ? ToTypeScriptType(property.DataType, property.Mandatory)
            : RemoveHintPrefix(property.CastDataType);
        WriteLine("/** " + ReplaceNewLine(property.Summary) + " */");
        WriteLine(ToLowerCamelCase(RemoveHintPrefix(property.Name)) + ": " + typeName + ';');
    }

    PopIndent();
    WriteLine("}");

    WriteLine("");
    WriteLine("/** " + ReplaceNewLine(Source.Summary) + " */");
    WriteLine("export class " + className + " implements I" + className + " {");
    PushIndent(T(1, 2));

    foreach (var property in Source.Properties.Where(x => !x.IsPartitionKey))
    {
        typeName = string.IsNullOrWhiteSpace(property.CastDataType)
            ? ToTypeScriptType(property.DataType, property.Mandatory)
            : RemoveHintPrefix(property.CastDataType);
        WriteLine("/** " + ReplaceNewLine(property.Summary) + " */");
        WriteLine(ToLowerCamelCase(RemoveHintPrefix(property.Name)) + "!: " + typeName + ';');
    }

    WriteLine("");
    WriteLine("constructor(data?: I" + className + ") {");
    WriteLine(T(1, 2) + "this.init(data);");
    WriteLine("}");

    WriteLine("");
    WriteLine("init(data?: any) {");
    PushIndent(T(1, 2));

    foreach (var property in Source.Properties.Where(x => !x.IsPartitionKey))
    {
        propName = ToLowerCamelCase(property.Name);
        WriteLine("this." + propName + " = data && data['" + propName + "'] ? data['" + propName + "'] : " + ToTypeScriptDefaultValue(property.DataType));
    }

    PopIndent();
    WriteLine("}");

    WriteLine("");
    WriteLine("static fromJS(data: any): " + className + " {");
    WriteLine("  return new " + className + "(typeof data === 'object' ? data : {});");
    WriteLine("}");

    PopIndent();
    WriteLine("}");

    if (includePagedListing)
    {
        WriteLine("");
        WriteLine("/** Defines a PagedListing of: " + (Source.Name ?? "") + " */");
        WriteLine("export interface I" + className + "PagedListing {");
        PushIndent(T(1));
        WriteLine("/** List items. */");
        WriteLine("items: " + className + "[];");
        WriteLine("/** Page information. */");
        WriteLine("pageInfo: PageInfo;");
        PopIndent();
        WriteLine("}");

        WriteLine("");
        WriteLine("/** PagedListing of: " + (Source.Name ?? "") + " */");
        WriteLine("export class " + className + "PagedListing implements I" + className + "PagedListing {");
        PushIndent(T(1));
        WriteLine("/** List items. */");
        WriteLine("items!: " + className + "[];");
        WriteLine("/** Page information. */");
        WriteLine("pageInfo!: PageInfo;");

        WriteLine("");
        WriteLine("constructor(data?: I" + className + ") {");
        WriteLine(T(1, 2) + "this.init(data);");
        WriteLine("}");

        WriteLine("");
        WriteLine("init(data?: any) {");
        PushIndent(T(1, 2));
        WriteLine("this.items = data && data['items'] ? data['items'] : [];");
        WriteLine("this.pageInfo = data && data['pageInfo'] ? data['pageInfo'] : PageInfo.defaultPagedPageInfo;");

        PopIndent();
        WriteLine("}");

        WriteLine("");
        WriteLine("static fromJS(data: any): " + className + "PagedListing {");
        WriteLine("  return new " + className + "PagedListing(typeof data === 'object' ? data : {});");
        WriteLine("}");


        PopIndent();
        WriteLine("}");

    }

#><#@ include file=".\Lib\Commons.tt" #>