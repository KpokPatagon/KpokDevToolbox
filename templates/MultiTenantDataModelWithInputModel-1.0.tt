// <auto-generated>
//   This code was generated by a tool.
//   Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated.
// </auto-generated>
<#@ template language="C#" #>
<#@ output extension=".Designer.cs" encoding="utf-8" #>
<#@ assembly name="netstandard.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="KpokEntityTool.Models" #>
<#@ include file=".\Lib\Commons.tt" #>
<#@ include file=".\Lib\EntityLib.tt" #>
<#@ parameter type="KpokEntityTool.Models.Entity" name="Source" #>
<#@ parameter type="System.String" name="TemplateFileName" #>
<#@ parameter type="System.String" name="SourceFileName" #>
<#
    int cnt;
    string sep;
    string tmp;
    string returnType;
    EntityProperty pkp;

    var pks = Source.Properties.Where(x =>
    {
        int pos;
        if (string.IsNullOrWhiteSpace(x.PrimaryKey)) 
        {
            return false;
        }
        else
        {
            if (Int32.TryParse(x.PrimaryKey, out pos)) 
            {
                return pos > 0;
            }
            else return false;
        }
    }).OrderBy(x => Convert.ToInt32(x.PrimaryKey));

    bool hasPK = pks.Any();

    pkp = Source.Properties.FirstOrDefault(x => x.IsPartitionKey);

    ExtendedProperty modelLabelsType;
    ExtendedProperty modelLabelsNamespace;
    modelLabelsType = Source.ExtendedProperties.FirstOrDefault(x => x.Key == "ModelLabelsType");
    modelLabelsNamespace = Source.ExtendedProperties.FirstOrDefault(x => x.Key == "ModelLabelsNamespace");
ClearIndent();
#>
namespace <#= Source.Namespace #>
{
    using System;
    using System.Linq;
    using System.Threading.Tasks;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;

    using Newtonsoft.Json;

    using Inetdev.Data;
    using Inetdev.Context;
    using Inetdev.Multitenancy;
<# if (modelLabelsNamespace != null && !string.IsNullOrWhiteSpace(modelLabelsNamespace.Value)) { #>    
    using <#= modelLabelsNamespace.Value #>;
<# } #>

<# 
    WriteSummary(1, Source.Summary); 
    PushIndent(Tabs(1));
    Write(BuildModifier(Source.Access) + " partial class " + Source.Name + " : DataModel");
    
    if (hasPK)
    {
        Write(", IEquatable<" + Source.Name + ">");
    }

    WriteLine(string.Empty);
    ClearIndent();
#>
    {
        /// <summary>
        /// Creates a new instance of <see cref="<#= Source.Name #>"/>.
        /// </summary>
        public <#= Source.Name #>()
        {
        }
<# if (hasPK) { #>

        /// <summary>
        /// Initializes a new instance of <see cref="<#= Source.Name #>"/>.
        /// </summary>
<# foreach (var pk in pks) { #>
        /// <param name="<#= ToArgument(pk.Name) #>"><#= pk.Summary ?? string.Empty #></param>
<# } #>
        public <#= Source.Name #>(<#= BuildArguments(pks) #>)
        {
<# foreach (var pk in pks) { #>
            <#= pk.Name #> = <#= ToArgument(pk.Name) #>;
<# } #>
        }
<# } #>

<# 

// entity properties
foreach (var property in Source.Properties) 
{ 
    ClearIndent();

    WriteLine(string.Empty);
    WriteLine(Tabs(2) + ToCSharpType(property.DataType, property.Mandatory) + " " + property.FieldName + ";");

    WriteSummary(2, property.Summary);

    PushIndent(Tabs(2));

    if (property.IsPartitionKey)
    {
        WriteLine("[PartitionKey]");
    }

    switch (property.DataType) {
    case DataType.BigInt:
    case DataType.Integer:
    case DataType.SmallInt:
    case DataType.TinyInt:
        Write("[IntegerDataProperty(\"" + property.Name + "\", DbType." + Convert.ToString(property.DataType));
        if (!string.IsNullOrWhiteSpace(property.MinValue)) { Write(", MinValue = " + property.MinValue); }
        if (!string.IsNullOrWhiteSpace(property.MaxValue)) { Write(", MaxValue = " + property.MaxValue); }
        if (property.PositiveOnly) { Write(", PositiveOnly = true"); }
        break;
    case DataType.Clob:
    case DataType.NClob:
    case DataType.NText:
    case DataType.Text:
        if (property.IsPrimaryKeyText) {
            Write("[PrimaryKeyTextDataProperty(\"" + property.Name + "\"");
        }
        else if (property.IsMail) {
            Write("[EmailTextDataProperty(\"" + property.Name + "\"");
        }
        else {
            Write("[TextDataProperty(\"" + property.Name + "\"");
        }
        Write(", DbType." + Convert.ToString(property.DataType));
        if (!string.IsNullOrWhiteSpace(property.MinLength)) { Write(", MinLength = " + property.MinLength); }
        if (!string.IsNullOrWhiteSpace(property.MaxLength)) { Write(", MaxLength = " + property.MaxLength); }
        if (!string.IsNullOrWhiteSpace(property.InvalidChars)) { Write(", InvalidChars = \"" + property.InvalidChars + "\""); }
        break;
    case DataType.Decimal:
        Write("[DecimalDataProperty(\"" + property.Name + "\", DbType." + Convert.ToString(property.DataType));
        if (!string.IsNullOrWhiteSpace(property.MinValue)) { Write(", MinValue = " + property.MinValue); }
        if (!string.IsNullOrWhiteSpace(property.MaxValue)) { Write(", MaxValue = " + property.MaxValue); }
        if (property.PositiveOnly) { Write(", PositiveOnly = true"); }

        if (!string.IsNullOrWhiteSpace(property.Precision))
        {
            int preci = 0;
            int scale = 0;

            Int32.TryParse(property.Precision, out preci);
            if (!string.IsNullOrWhiteSpace(property.Scale)) {
                Int32.TryParse(property.Scale, out scale);
            }

            if (preci > 0) { Write(", Integers = " + Convert.ToString(preci - scale)); }
            if (scale > 0) { Write(", Decimals = " + Convert.ToString(scale)); }
        }
        break;
    case DataType.Float:
        Write("[FloatDataProperty(\"" + property.Name + "\", DbType." + Convert.ToString(property.DataType));
        if (!string.IsNullOrWhiteSpace(property.MinValue)) { Write(", MinValue = " + property.MinValue); }
        if (!string.IsNullOrWhiteSpace(property.MaxValue)) { Write(", MaxValue = " + property.MaxValue); }
        if (property.PositiveOnly) { Write(", PositiveOnly = true"); }
        break;
    default:
        // default is for Blob, Boolean, DateTime, Guid and TimeSpan.
        Write("[GenericDataProperty(\"" + property.Name + "\", DbType." + Convert.ToString(property.DataType));
        break;
    }
    if (!string.IsNullOrWhiteSpace(property.FieldName)) { Write(", FieldName = \"" + property.FieldName + "\""); }
    if (!string.IsNullOrWhiteSpace(property.PrimaryKey) && property.PrimaryKey != "0") {
        Write(", PrimaryKey = " + property.PrimaryKey);
    }
    else if (property.Mandatory && property.DataType != DataType.Boolean) {
        Write(", Mandatory = true");
    }
    if (!string.IsNullOrWhiteSpace(property.DefaultValue)) { Write(", DefaultValue = " + property.DefaultValue); }
    if (property.AutomaticType != AutomaticType.None) { Write(", AutomaticType = AutomaticType." + Convert.ToString(property.AutomaticType)); }
    if (property.Protection != ProtectionType.None) { Write(", Protection = ProtectionType." + Convert.ToString(property.Protection)); }

    if (modelLabelsType != null && !string.IsNullOrWhiteSpace(modelLabelsType.Value)) {
        Write(", Caption = \"" + Source.Name + property.Name + "Caption\"");
    }
    else { Write(", Caption = \"" + property.Caption + "\""); }

    if (!string.IsNullOrWhiteSpace(property.Hint)) { Write(", Hint = \"" + Source.Name + property.Name + "Hint\""); }
    if (!string.IsNullOrWhiteSpace(property.MandatoryMessage)) { Write(", RequiredMessage = \"" + Source.Name + property.Name + "MandatoryMessage\""); }
    if (!string.IsNullOrWhiteSpace(property.InvalidContentMessage)) { Write(", InvalidContentMessage = \"" + Source.Name + property.Name + "InvalidContentMessage\""); }
    if (modelLabelsType != null && !string.IsNullOrWhiteSpace(modelLabelsType.Value)) { Write(", ResourceType = typeof(" + modelLabelsType.Value + ")"); }
    WriteLine(")]");

    if (     !string.IsNullOrWhiteSpace(property.MandatoryMessage)
        && ((!string.IsNullOrWhiteSpace(property.PrimaryKey) && property.PrimaryKey != "0") || property.Mandatory)) 
    {
        if (modelLabelsType != null && !string.IsNullOrWhiteSpace(modelLabelsType.Value)) {
            Write("[Required(ErrorMessageResourceName = \"" + Source.Name + property.Name + "MandatoryMessage\"");
            WriteLine(", ErrorMessageResourceType = typeof(" + modelLabelsType.Value + "))]");
        }
        else {
            WriteLine("[Required(ErrorMessage = \"" + property.MandatoryMessage + "\")]");
        }
    }

    if (   property.DataType == DataType.Clob 
        || property.DataType == DataType.NClob 
        || property.DataType == DataType.NText 
        || property.DataType == DataType.Text)
    {
        if (!string.IsNullOrWhiteSpace(property.InvalidContentMessage))
        {
            int minlen = 0;
            int maxlen = 0;
            if (!string.IsNullOrWhiteSpace(property.MinLength)) {
                Int32.TryParse(property.MinLength, out minlen);
            }
            if (!string.IsNullOrWhiteSpace(property.MaxLength)) {
                Int32.TryParse(property.MaxLength, out maxlen);
            }

            if (maxlen > 0)
            {
                Write("[StringLength(" + Convert.ToString(maxlen));
                if (modelLabelsType != null && !string.IsNullOrWhiteSpace(modelLabelsType.Value)) 
                {
                    Write(", ErrorMessageResourceName = \"" + Source.Name + property.Name + "InvalidContentMessage\"");
                    Write(", ErrorMessageResourceType = typeof(" + modelLabelsType.Value + ")");
                }
                else 
                {
                    Write(", ErrorMessage = \"" + property.InvalidContentMessage + "\"");
                }
                if (minlen > 0) {
                    Write(", MinimumLength = " + Convert.ToString(minlen));
                }
                WriteLine(")]");
            }
        }
    }

    if (property.DataType == DataType.Blob && string.Equals("byte[]", property.CastDataType))
    {
        WriteLine(BuildModifier(property.Access) + " byte[] " + property.Name);
        WriteLine("{");
        PushIndent(Tabs(1));

        // get
        WriteLine("get { return " + property.FieldName + "; }");

        // set
        WriteLine("set");
        WriteLine("{");
        PushIndent(Tabs(1));
        WriteLine(property.FieldName + " = value;");
        WriteLine("NotifyPropertyChanged(" + property.FieldName + ");");
        PopIndent();
        WriteLine("}");
        
        PopIndent();
        WriteLine("}");
    }
    else if (property.DataType == DataType.Blob)
    {
        WriteLine(BuildModifier(property.Access) + " BinaryAttachment " + property.Name);
        WriteLine("{");
        PushIndent(Tabs(1));

        // get
        WriteLine("get");
        WriteLine("{");
        PushIndent(Tabs(1));
        WriteLine("if (" + property.FieldName + " == null || " + property.FieldName + ".Length == 0) return null;");
        WriteLine("else return new BinaryAttachment(" + property.FieldName + ");");
        PopIndent();
        WriteLine("}");

        // set
        WriteLine("set");
        WriteLine("{");
        PushIndent(Tabs(1));
        WriteLine("if (value == null) " + property.FieldName + " = null;");
        WriteLine("else " + property.FieldName + " = value.BinaryData;");
        WriteLine("NotifyPropertyChanged(" + property.FieldName + ");");
        PopIndent();
        WriteLine("}");
        
        PopIndent();
        WriteLine("}");
    }
    else
    {
        returnType = string.IsNullOrWhiteSpace(property.CastDataType)
            ? ToCSharpType(property.DataType, property.Mandatory)
            : property.CastDataType;

        WriteLine(BuildModifier(property.Access) + " " + returnType + " " + property.Name);
        WriteLine("{");
        PushIndent(Tabs(1));

        tmp = string.IsNullOrWhiteSpace(property.CastDataType)
            ? property.FieldName
            : "(" + property.CastDataType + ")" + property.FieldName;

        WriteLine("get { return " + tmp + "; }");
        WriteLine("set");
        WriteLine("{");
        PushIndent(Tabs(1));

        tmp = string.IsNullOrWhiteSpace(property.CastDataType)
            ? "value"
            : "(" + ToCSharpType(property.DataType, property.Mandatory) + ")value";

        WriteLine(property.FieldName + " = " + tmp + ";");
        WriteLine("NotifyPropertyChanged(" + property.FieldName + ");");
        PopIndent();
        WriteLine("}");
        PopIndent();
        WriteLine("}");
    }
} 
// end of entity properties

// navigational properties
foreach (var property in Source.NavigationalProperties)
{
    ClearIndent();

    returnType = property.DataModelType;
    if (!property.IsSingle) 
    {
        returnType = "IEnumerable<" + returnType + ">";
    }
    
    WriteLine(string.Empty);
    WriteLine(Tabs(2) + returnType + " " + ToFieldName(property.Name) + ";");

    WriteSummary(2, property.Summary);

    PushIndent(Tabs(2));

    if (property.IsParent) { 
        WriteLine("[JsonIgnore]");
        WriteLine("[ParentNavigationalProperty]"); 
    }

    WriteLine(BuildModifier(property.Access) + " " + returnType + " " + property.Name);
    WriteLine("{");
    PushIndent(Tabs(1));

    // getter
    WriteLine("get");
    WriteLine("{");
    PushIndent(Tabs(1));

    cnt = 0;
    tmp = string.Empty;
    sep = string.Empty;
    
    foreach (var par in property.ParameterMappings)
    {
        var p = Source.Properties.FirstOrDefault(x => x.Name == par.PropertyName);
        if (p != null && !IsBoolean(p))
        {
            cnt++;

            tmp += sep + p.FieldName;

            if (IsNullable(p)) 
            {
                tmp += " == null";
            }
            else if (IsDateTime(p)) 
            {
                tmp += " == DateTime.MinValue";
            }
            else if (IsDecimal(p)) 
            {
                tmp += (p.PositiveOnly ? " <= " : " < ") + "0m";
            }
            else // if (IsInteger(p))
            {
                tmp += (p.PositiveOnly ? " <= " : " < ") + "0";
            }
            
            if (string.IsNullOrWhiteSpace(sep)) { sep = " && "; }
        }
    }

    if (cnt > 0 && cnt == property.ParameterMappings.Count)
    {
        WriteLine("if (" + tmp + ")");
        WriteLine("{");
        PushIndent(Tabs(1));
        if (property.IsSingle) 
        {
            WriteLine("return null;");
        }
        else 
        { 
            WriteLine("return new " + property.DataModelType + "[0];");
        }
        PopIndent();
        WriteLine("}");
        WriteLine(string.Empty);
    }

    WriteLine("if (" + ToFieldName(property.Name) + " == null)");
    WriteLine("{");
    PushIndent(Tabs(1));

    if (   string.IsNullOrWhiteSpace(property.DataServiceType)
        || string.IsNullOrWhiteSpace(property.DataServiceFilter))
    {
        Write(ToFieldName(property.Name) + " = " + property.DataModelType + ".Load(");
        
        sep = string.Empty;
        foreach (var par in property.ParameterMappings) 
        {
            Write(sep + par.ParameterName + ": " + par.PropertyName);
            if (string.IsNullOrWhiteSpace(sep)) { sep = ", "; }
        }
        WriteLine(");");
    }
    else
    {
        WriteLine(property.DataServiceType + " ds = ApplicationContext.Current.GetObject<" + property.DataServiceType + ">();");
        
        if (property.DataServiceFilterIsAsync)
        {
            Write("Task<" + returnType + "> task = ");
        }
        else
        {
            Write(ToFieldName(property.Name) + " = ");
        }
        
        Write("ds." + property.DataServiceFilter + "(");
        
        sep = string.Empty;
        foreach (var par in property.ParameterMappings) 
        {
            Write(sep + par.ParameterName + ": " + par.PropertyName);
            if (string.IsNullOrWhiteSpace(sep)) { sep = ", "; }
        }
        WriteLine(");");

        if (property.DataServiceFilterIsAsync)
        {
            WriteLine("task.Wait();");
            WriteLine(ToFieldName(property.Name) + " = task.Result;");
        }
    }

    PopIndent();
    WriteLine("}");

    WriteLine("return " + ToFieldName(property.Name) + ";");

    PopIndent();
    WriteLine("}");

    // setter
    WriteLine("set { " + ToFieldName(property.Name) + " = value; }");

    PopIndent();
    WriteLine("}");
}
// end of  navigational properties.

ClearIndent();
#>

        /// <summary>Whether model validation must be enforced.</summary>
        [Editable(false)]
        public override bool EnforceModelValidation => <#= (Source.EnforceModelValidation ? "true" : "false") #>;
<# if (pks.Any()) { #>
        
        #region Static loaders

        /// <summary>
        /// Initializes a new instance of <see cref="<#= Source.Name #>"/> by loading the data from the underlaying repository.
        /// </summary>
<#
ClearIndent();
PushIndent(Tabs(2));
if (pkp != null && pkp.PrimaryKey == "0") {
    WriteLine("/// <param name=\"" + ToArgument(pkp.Name) + "\">Identification of the current <b>Tenant</b></param>");
}
foreach (var pk in pks) {
    WriteLine("/// <param name=\"" + ToArgument(pk.Name) + "\">" + (pk.Summary ?? string.Empty) + "</param>");
}
Write("public static " + Source.Name + " Load(");
if (pkp != null && pkp.PrimaryKey == "0") {
    Write(ToCSharpType(pkp.DataType, pkp.Mandatory) + " " + ToArgument(pkp.Name) + ", ");
}
Write(BuildArguments(pks));
WriteLine(")");
WriteLine("{");
PushIndent(Tabs(1));
WriteLine(Source.Name + " o = ApplicationContext.Current.GetObject<" + Source.Name + ">();");
if (pkp != null && pkp.PrimaryKey == "0") {
    WriteLine("o." + pkp.Name + " = " + ToArgument(pkp.Name) + ";");
}
foreach (var pk in pks) {
    WriteLine("o." + pk.Name + " = " + ToArgument(pk.Name) + ";");
}
WriteLine("return o.DataServices.GetModel(o);");
PopIndent();
WriteLine("}");
ClearIndent();
#>        

        /// <summary>
        /// Initializes a new instance of <see cref="<#= Source.Name #>"/> by loading the data from the underlaying repository.
        /// </summary>
<#
ClearIndent();
PushIndent(Tabs(2));
if (pkp != null && pkp.PrimaryKey == "0") {
    WriteLine("/// <param name=\"" + ToArgument(pkp.Name) + "\">Identification of the current <b>Tenant</b></param>");
}
foreach (var pk in pks) {
    WriteLine("/// <param name=\"" + ToArgument(pk.Name) + "\">" + (pk.Summary ?? string.Empty) + "</param>");
}
Write("public static Task<" + Source.Name + "> LoadAsync(");
if (pkp != null && pkp.PrimaryKey == "0") {
    Write(ToCSharpType(pkp.DataType, pkp.Mandatory) + " " + ToArgument(pkp.Name) + ", ");
}
Write(BuildArguments(pks));
WriteLine(")");
WriteLine("{");
PushIndent(Tabs(1));
WriteLine(Source.Name + " o = ApplicationContext.Current.GetObject<" + Source.Name + ">();");
if (pkp != null && pkp.PrimaryKey == "0") {
    WriteLine("o." + pkp.Name + " = " + ToArgument(pkp.Name) + ";");
}
foreach (var pk in pks) {
    WriteLine("o." + pk.Name + " = " + ToArgument(pk.Name) + ";");
}
WriteLine("return Task.FromResult(o.DataServices.GetModel(o));");
PopIndent();
WriteLine("}");
ClearIndent();
#>

        #endregion

        #region IEquatable<<#= Source.Name#>> implementation.

        /// <summary>
        /// Checks if <paramref name="other"/> is equals to this object.
        /// </summary>
        public bool Equals(<#= Source.Name #> other)
        {
            if (other == null) return false;
            else
            {
<#
ClearIndent();
PushIndent(Tabs(4));

sep = string.Empty;
tmp = string.Empty;
foreach (var pk in pks) 
{
    if (string.IsNullOrWhiteSpace(sep)) 
    {
        Write("return ");
    }
    Write(sep);

    if (pk.DataType == DataType.NText || pk.DataType == DataType.Text)
    {
        Write("string.Equals(" + pk.Name + ", other." + pk.Name + ", StringComparison.OrdinalIgnoreCase)");
    }
    else
    {
        Write("(" + pk.Name + " == other." + pk.Name + ")");
    }

    if (pk.Equals(pks.Last())) 
    {
        WriteLine(";");
    }
    else
    {
        WriteLine(string.Empty);
    }

    if (string.IsNullOrWhiteSpace(sep)) 
    { 
        sep = "&& "; 
        PushIndent(Tabs(1));
    }
}

ClearIndent();
#>
            }
        }

        /// <summary>
        /// Checks if <paramref name="obj"/> is equals to this object.
        /// </summary>
        /// <param name="obj">An object to compare with this object.</param>
        public override bool Equals(object obj) => Equals(obj as <#= Source.Name #>);

        /// <summary>Not required, implemented to avoid warnings, returns base.GetHasCode().</summary>
        public override int GetHashCode() => base.GetHashCode();

        #endregion
<# } #>
    }

<#
	WriteSummary(1, Source.Summary);
	PushIndent(Tabs(1));
	WriteLine(BuildModifier(Source.Access) + " partial class " + Source.Name + "InputModel");
	ClearIndent();
#>
	{
		/// <summary>Creates a new instance of <see cref="<#= Source.Name #>InputModel" />.</summary>
		public <#= Source.Name #>InputModel()
		{
		}

		/// <summary>Initializes a new instance of <see cref="<#= Source.Name #>InputModel" /> from <paramref name="source"/>.</summary>
		/// <exception cref="ArgumentNullException">
        ///     Thrown when <paramref name="source"/> is <see langword="null"/>.
        /// </exception>
		public <#= Source.Name #>InputModel(<#= Source.Name #> source)
		{
			if (source == null)
				throw new ArgumentNullException(nameof(source));

<#
ClearIndent();
PushIndent(Tabs(3));
foreach (var property in Source.Properties)
{
	WriteLine(property.Name + " = source." + property.Name + ";");
}
ClearIndent();
#>
		}

<#
foreach (var property in Source.Properties)
{
	ClearIndent();

	WriteSummary(2, property.Summary);
	PushIndent(Tabs(2));

	returnType = string.IsNullOrWhiteSpace(property.CastDataType)
            ? ToCSharpType(property.DataType, property.Mandatory)
            : property.CastDataType;

	Write("[Display(");
    if (modelLabelsType != null && !string.IsNullOrWhiteSpace(modelLabelsType.Value)) {
        Write("Name = \"" + Source.Name + property.Name + "Caption\"");
    }
	else { Write("Name = \"" + property.Caption + "\""); }
    if (modelLabelsType != null && !string.IsNullOrWhiteSpace(modelLabelsType.Value)) { Write(", ResourceType = typeof(" + modelLabelsType.Value + ")"); }
	WriteLine(")]");
	
    if (     !string.IsNullOrWhiteSpace(property.MandatoryMessage)
        && ((!string.IsNullOrWhiteSpace(property.PrimaryKey) && property.PrimaryKey != "0") || property.Mandatory)) 
    {
        if (modelLabelsType != null && !string.IsNullOrWhiteSpace(modelLabelsType.Value)) {
            Write("[Required(ErrorMessageResourceName = \"" + Source.Name + property.Name + "MandatoryMessage\"");
            WriteLine(", ErrorMessageResourceType = typeof(" + modelLabelsType.Value + "))]");
        }
        else {
            WriteLine("[Required(ErrorMessage = \"" + property.MandatoryMessage + "\")]");
        }
    }

    if (   property.DataType == DataType.Clob 
        || property.DataType == DataType.NClob 
        || property.DataType == DataType.NText 
        || property.DataType == DataType.Text)
    {
        if (!string.IsNullOrWhiteSpace(property.InvalidContentMessage))
        {
            int minlen = 0;
            int maxlen = 0;
            if (!string.IsNullOrWhiteSpace(property.MinLength)) {
                Int32.TryParse(property.MinLength, out minlen);
            }
            if (!string.IsNullOrWhiteSpace(property.MaxLength)) {
                Int32.TryParse(property.MaxLength, out maxlen);
            }

            if (maxlen > 0)
            {
                Write("[StringLength(" + Convert.ToString(maxlen));
                if (modelLabelsType != null && !string.IsNullOrWhiteSpace(modelLabelsType.Value)) 
                {
                    Write(", ErrorMessageResourceName = \"" + Source.Name + property.Name + "InvalidContentMessage\"");
                    Write(", ErrorMessageResourceType = typeof(" + modelLabelsType.Value + ")");
                }
                else 
                {
                    Write(", ErrorMessage = \"" + property.InvalidContentMessage + "\"");
                }
                if (minlen > 0) {
                    Write(", MinimumLength = " + Convert.ToString(minlen));
                }
                WriteLine(")]");
            }

            if (property.IsMail)
            {
                Write("[EmailAddress(");
                if (modelLabelsType != null && !string.IsNullOrWhiteSpace(modelLabelsType.Value)) 
                {
                    Write("ErrorMessageResourceName = \"" + Source.Name + property.Name + "InvalidContentMessage\"");
                    Write(", ErrorMessageResourceType = typeof(" + modelLabelsType.Value + ")");
                }
                else 
                {
                    Write("ErrorMessage = \"" + property.InvalidContentMessage + "\"");
                }
                WriteLine(")]");
            }
        }
    }

	WriteLine(BuildModifier(property.Access) + " " + returnType + " " + property.Name + " { get; set; }");
}
ClearIndent();
#>
	}
}
// Tpl: <#= System.IO.Path.GetFileName(TemplateFileName) #>
// Src: <#= System.IO.Path.GetFileName(SourceFileName) #>
